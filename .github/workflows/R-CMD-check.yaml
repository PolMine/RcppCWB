# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
      - dev
  pull_request:
    branches:
      - main
      - master
      - dev

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: windows-2022, r: 'devel'}
          - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
          - {os: ubuntu-20.04, r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - name: Download Rtools42 
        if: matrix.config.os == 'windows-2022'
        run: |
          Invoke-WebRequest -Uri  https://www.r-project.org/nosvn/winutf8/ucrt3/rtools42-4998-4926.exe -OutFile rtools42.exe
          .\rtools42.exe /verysilent /suppressmsgboxes
 

#      - nme: Setup R (Windows UCRT)
#        if: matrix.config.os == 'windows-2022'
#        uses: kalibera/ucrt3/actions/r-install@main
        
#      - name: Install UCRT toolchain
#        if: matrix.config.os == 'windows-2022'
#        uses: kalibera/ucrt3/actions/toolchain-install@main
#        with:
#          # base ... toolchain has the compilers and libraries to build R and recommended packages
#          # full ... additional libraries to build CRAN packages
#          # none ... no toolchain is needed (no native code) 
#          toolchain-type: full
          
#      - name: Check package
#        if: matrix.config.os == 'windows-2022'
#        uses: kalibera/R-actions/pkg-check@master

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: rcmdcheck

      - name: Find Rtools42
        run: |
          ls .
          ls C:\
          ls D:\


      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libcurl4-openssl-dev
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
          remotes::install_cran("covr")
          remotes::install_cran("pkgbuild")
          remotes::install_cran("testthat")
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      
      - name: Build Windows binary package
        if: matrix.os == 'windows-latest'
        run: pkgbuild::build(binary = TRUE, dest_path = Sys.getenv("GITHUB_WORKSPACE"))
        shell: Rscript {0}
          
      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: RcppCWB-Windows-binary
          path: ./*.zip

      - name: Build macOS binary package
        if: runner.os == 'macOS'
        run: |
          R CMD build .
          R CMD INSTALL --build *.tar.gz

      - name: Upload macOS binary
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: RcppCWB-macOS-binary
          path: ./*.tgz

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
          
      - name: Test coverage
        run: covr::codecov()
        shell: Rscript {0}
