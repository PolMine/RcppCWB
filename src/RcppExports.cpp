// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppCWB.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// decode_s_attribute
Rcpp::StringVector decode_s_attribute(SEXP corpus, SEXP s_attribute, SEXP registry);
RcppExport SEXP _RcppCWB_decode_s_attribute(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(decode_s_attribute(corpus, s_attribute, registry));
    return rcpp_result_gen;
END_RCPP
}
// get_count_vector
Rcpp::IntegerVector get_count_vector(SEXP corpus, SEXP p_attribute, SEXP registry);
RcppExport SEXP _RcppCWB_get_count_vector(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(get_count_vector(corpus, p_attribute, registry));
    return rcpp_result_gen;
END_RCPP
}
// get_region_matrix
Rcpp::IntegerMatrix get_region_matrix(SEXP corpus, SEXP s_attribute, SEXP strucs, SEXP registry);
RcppExport SEXP _RcppCWB_get_region_matrix(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP strucsSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type strucs(strucsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(get_region_matrix(corpus, s_attribute, strucs, registry));
    return rcpp_result_gen;
END_RCPP
}
// get_cbow_matrix
Rcpp::IntegerMatrix get_cbow_matrix(SEXP corpus, SEXP p_attribute, SEXP registry, SEXP matrix, SEXP window);
RcppExport SEXP _RcppCWB_get_cbow_matrix(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP matrixSEXP, SEXP windowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type window(windowSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cbow_matrix(corpus, p_attribute, registry, matrix, window));
    return rcpp_result_gen;
END_RCPP
}
// region_matrix_to_ids
Rcpp::IntegerVector region_matrix_to_ids(SEXP corpus, SEXP p_attribute, SEXP registry, SEXP matrix);
RcppExport SEXP _RcppCWB_region_matrix_to_ids(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(region_matrix_to_ids(corpus, p_attribute, registry, matrix));
    return rcpp_result_gen;
END_RCPP
}
// ranges_to_cpos
Rcpp::IntegerVector ranges_to_cpos(SEXP ranges);
RcppExport SEXP _RcppCWB_ranges_to_cpos(SEXP rangesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ranges(rangesSEXP);
    rcpp_result_gen = Rcpp::wrap(ranges_to_cpos(ranges));
    return rcpp_result_gen;
END_RCPP
}
// ids_to_count_matrix
Rcpp::IntegerMatrix ids_to_count_matrix(Rcpp::IntegerVector ids);
RcppExport SEXP _RcppCWB_ids_to_count_matrix(SEXP idsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ids(idsSEXP);
    rcpp_result_gen = Rcpp::wrap(ids_to_count_matrix(ids));
    return rcpp_result_gen;
END_RCPP
}
// region_matrix_to_count_matrix
Rcpp::IntegerVector region_matrix_to_count_matrix(SEXP corpus, SEXP p_attribute, SEXP registry, SEXP matrix);
RcppExport SEXP _RcppCWB_region_matrix_to_count_matrix(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< SEXP >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(region_matrix_to_count_matrix(corpus, p_attribute, registry, matrix));
    return rcpp_result_gen;
END_RCPP
}
// region_matrix_context
Rcpp::IntegerMatrix region_matrix_context(SEXP corpus, SEXP registry, Rcpp::IntegerMatrix region_matrix, SEXP p_attribute, SEXP s_attribute, SEXP boundary, int left, int right);
RcppExport SEXP _RcppCWB_region_matrix_context(SEXP corpusSEXP, SEXP registrySEXP, SEXP region_matrixSEXP, SEXP p_attributeSEXP, SEXP s_attributeSEXP, SEXP boundarySEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type region_matrix(region_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< int >::type left(leftSEXP);
    Rcpp::traits::input_parameter< int >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(region_matrix_context(corpus, registry, region_matrix, p_attribute, s_attribute, boundary, left, right));
    return rcpp_result_gen;
END_RCPP
}
// region_matrix_to_struc_matrix
Rcpp::IntegerMatrix region_matrix_to_struc_matrix(SEXP corpus, SEXP s_attribute, Rcpp::IntegerMatrix region_matrix, SEXP registry);
RcppExport SEXP _RcppCWB_region_matrix_to_struc_matrix(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP region_matrixSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type region_matrix(region_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(region_matrix_to_struc_matrix(corpus, s_attribute, region_matrix, registry));
    return rcpp_result_gen;
END_RCPP
}
// region_to_strucs
Rcpp::IntegerVector region_to_strucs(SEXP corpus, SEXP s_attribute, Rcpp::IntegerVector region, SEXP registry);
RcppExport SEXP _RcppCWB_region_to_strucs(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP regionSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type region(regionSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(region_to_strucs(corpus, s_attribute, region, registry));
    return rcpp_result_gen;
END_RCPP
}
// cwb_version
Rcpp::StringVector cwb_version();
static SEXP _RcppCWB_cwb_version_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(cwb_version());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cwb_version() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cwb_version_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// p_attr_default
Rcpp::StringVector p_attr_default();
static SEXP _RcppCWB_p_attr_default_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(p_attr_default());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_p_attr_default() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_p_attr_default_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// s_attr
SEXP s_attr(SEXP corpus, SEXP s_attribute, SEXP registry);
static SEXP _RcppCWB_s_attr_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(s_attr(corpus, s_attribute, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_s_attr(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_s_attr_try(corpusSEXP, s_attributeSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// p_attr
SEXP p_attr(SEXP corpus, SEXP p_attribute, SEXP registry);
static SEXP _RcppCWB_p_attr_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(p_attr(corpus, p_attribute, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_p_attr(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_p_attr_try(corpusSEXP, p_attributeSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// attribute_size
int attribute_size(SEXP corpus, SEXP attribute, SEXP attribute_type, SEXP registry);
static SEXP _RcppCWB_attribute_size_try(SEXP corpusSEXP, SEXP attributeSEXP, SEXP attribute_typeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type attribute_type(attribute_typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(attribute_size(corpus, attribute, attribute_type, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_attribute_size(SEXP corpusSEXP, SEXP attributeSEXP, SEXP attribute_typeSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_attribute_size_try(corpusSEXP, attributeSEXP, attribute_typeSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// p_attr_size
int p_attr_size(SEXP p_attr);
static SEXP _RcppCWB_p_attr_size_try(SEXP p_attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    rcpp_result_gen = Rcpp::wrap(p_attr_size(p_attr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_p_attr_size(SEXP p_attrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_p_attr_size_try(p_attrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// s_attr_size
int s_attr_size(SEXP s_attr);
static SEXP _RcppCWB_s_attr_size_try(SEXP s_attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    rcpp_result_gen = Rcpp::wrap(s_attr_size(s_attr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_s_attr_size(SEXP s_attrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_s_attr_size_try(s_attrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// p_attr_lexicon_size
int p_attr_lexicon_size(SEXP p_attr);
static SEXP _RcppCWB_p_attr_lexicon_size_try(SEXP p_attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    rcpp_result_gen = Rcpp::wrap(p_attr_lexicon_size(p_attr));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_p_attr_lexicon_size(SEXP p_attrSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_p_attr_lexicon_size_try(p_attrSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_lexicon_size
int _cl_lexicon_size(SEXP corpus, SEXP p_attribute, SEXP registry);
static SEXP _RcppCWB__cl_lexicon_size_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_lexicon_size(corpus, p_attribute, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_lexicon_size(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_lexicon_size_try(corpusSEXP, p_attributeSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_cpos2struc
Rcpp::IntegerVector _cl_cpos2struc(SEXP corpus, SEXP s_attribute, Rcpp::IntegerVector cpos, SEXP registry);
static SEXP _RcppCWB__cl_cpos2struc_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_cpos2struc(corpus, s_attribute, cpos, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_cpos2struc(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_cpos2struc_try(corpusSEXP, s_attributeSEXP, cposSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos_to_struc
Rcpp::IntegerVector cpos_to_struc(SEXP s_attr, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos_to_struc_try(SEXP s_attrSEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos_to_struc(s_attr, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos_to_struc(SEXP s_attrSEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos_to_struc_try(s_attrSEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos2str
Rcpp::StringVector cpos2str(SEXP corpus, SEXP p_attribute, SEXP registry, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos2str_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos2str(corpus, p_attribute, registry, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos2str(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos2str_try(corpusSEXP, p_attributeSEXP, registrySEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos_to_str
Rcpp::StringVector cpos_to_str(SEXP p_attr, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos_to_str_try(SEXP p_attrSEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos_to_str(p_attr, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos_to_str(SEXP p_attrSEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos_to_str_try(p_attrSEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos2id
Rcpp::IntegerVector cpos2id(SEXP corpus, SEXP p_attribute, SEXP registry, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos2id_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos2id(corpus, p_attribute, registry, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos2id(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos2id_try(corpusSEXP, p_attributeSEXP, registrySEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos_to_id
Rcpp::IntegerVector cpos_to_id(SEXP p_attr, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos_to_id_try(SEXP p_attrSEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos_to_id(p_attr, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos_to_id(SEXP p_attrSEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos_to_id_try(p_attrSEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// struc2cpos
Rcpp::IntegerVector struc2cpos(SEXP corpus, SEXP s_attribute, SEXP registry, int struc);
static SEXP _RcppCWB_struc2cpos_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP, SEXP strucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< int >::type struc(strucSEXP);
    rcpp_result_gen = Rcpp::wrap(struc2cpos(corpus, s_attribute, registry, struc));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_struc2cpos(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP, SEXP strucSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_struc2cpos_try(corpusSEXP, s_attributeSEXP, registrySEXP, strucSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// struc_to_cpos
Rcpp::IntegerVector struc_to_cpos(SEXP s_attr, int struc);
static SEXP _RcppCWB_struc_to_cpos_try(SEXP s_attrSEXP, SEXP strucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    Rcpp::traits::input_parameter< int >::type struc(strucSEXP);
    rcpp_result_gen = Rcpp::wrap(struc_to_cpos(s_attr, struc));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_struc_to_cpos(SEXP s_attrSEXP, SEXP strucSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_struc_to_cpos_try(s_attrSEXP, strucSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// id2str
Rcpp::StringVector id2str(SEXP corpus, SEXP p_attribute, SEXP registry, Rcpp::IntegerVector id);
static SEXP _RcppCWB_id2str_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(id2str(corpus, p_attribute, registry, id));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_id2str(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP registrySEXP, SEXP idSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_id2str_try(corpusSEXP, p_attributeSEXP, registrySEXP, idSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_struc2str
Rcpp::StringVector _cl_struc2str(SEXP corpus, SEXP s_attribute, Rcpp::IntegerVector struc, SEXP registry);
static SEXP _RcppCWB__cl_struc2str_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP strucSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type struc(strucSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_struc2str(corpus, s_attribute, struc, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_struc2str(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP strucSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_struc2str_try(corpusSEXP, s_attributeSEXP, strucSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// struc_to_str
Rcpp::StringVector struc_to_str(SEXP s_attr, Rcpp::IntegerVector struc);
static SEXP _RcppCWB_struc_to_str_try(SEXP s_attrSEXP, SEXP strucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type struc(strucSEXP);
    rcpp_result_gen = Rcpp::wrap(struc_to_str(s_attr, struc));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_struc_to_str(SEXP s_attrSEXP, SEXP strucSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_struc_to_str_try(s_attrSEXP, strucSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_regex2id
Rcpp::IntegerVector _cl_regex2id(SEXP corpus, SEXP p_attribute, SEXP regex, SEXP registry);
static SEXP _RcppCWB__cl_regex2id_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP regexSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type regex(regexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_regex2id(corpus, p_attribute, regex, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_regex2id(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP regexSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_regex2id_try(corpusSEXP, p_attributeSEXP, regexSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// regex_to_id
Rcpp::IntegerVector regex_to_id(SEXP p_attr, SEXP regex);
static SEXP _RcppCWB_regex_to_id_try(SEXP p_attrSEXP, SEXP regexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type regex(regexSEXP);
    rcpp_result_gen = Rcpp::wrap(regex_to_id(p_attr, regex));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_regex_to_id(SEXP p_attrSEXP, SEXP regexSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_regex_to_id_try(p_attrSEXP, regexSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_str2id
Rcpp::IntegerVector _cl_str2id(SEXP corpus, SEXP p_attribute, Rcpp::StringVector str, SEXP registry);
static SEXP _RcppCWB__cl_str2id_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP strSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type str(strSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_str2id(corpus, p_attribute, str, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_str2id(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP strSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_str2id_try(corpusSEXP, p_attributeSEXP, strSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// str_to_id
Rcpp::IntegerVector str_to_id(SEXP p_attr, Rcpp::StringVector str);
static SEXP _RcppCWB_str_to_id_try(SEXP p_attrSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(str_to_id(p_attr, str));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_str_to_id(SEXP p_attrSEXP, SEXP strSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_str_to_id_try(p_attrSEXP, strSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_id2freq
Rcpp::IntegerVector _cl_id2freq(SEXP corpus, SEXP p_attribute, Rcpp::IntegerVector id, SEXP registry);
static SEXP _RcppCWB__cl_id2freq_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP idSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type id(idSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_id2freq(corpus, p_attribute, id, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_id2freq(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP idSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_id2freq_try(corpusSEXP, p_attributeSEXP, idSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// id_to_freq
Rcpp::IntegerVector id_to_freq(SEXP p_attr, Rcpp::IntegerVector id);
static SEXP _RcppCWB_id_to_freq_try(SEXP p_attrSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(id_to_freq(p_attr, id));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_id_to_freq(SEXP p_attrSEXP, SEXP idSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_id_to_freq_try(p_attrSEXP, idSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_id2cpos
Rcpp::IntegerVector _cl_id2cpos(SEXP corpus, SEXP p_attribute, SEXP id, SEXP registry);
static SEXP _RcppCWB__cl_id2cpos_try(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP idSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type id(idSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_id2cpos(corpus, p_attribute, id, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_id2cpos(SEXP corpusSEXP, SEXP p_attributeSEXP, SEXP idSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_id2cpos_try(corpusSEXP, p_attributeSEXP, idSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// id_to_cpos
Rcpp::IntegerVector id_to_cpos(SEXP p_attr, Rcpp::IntegerVector id);
static SEXP _RcppCWB_id_to_cpos_try(SEXP p_attrSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type p_attr(p_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(id_to_cpos(p_attr, id));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_id_to_cpos(SEXP p_attrSEXP, SEXP idSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_id_to_cpos_try(p_attrSEXP, idSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cl_cpos2lbound
Rcpp::IntegerVector cl_cpos2lbound(SEXP corpus, SEXP s_attribute, Rcpp::IntegerVector cpos, SEXP registry);
static SEXP _RcppCWB_cl_cpos2lbound_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(cl_cpos2lbound(corpus, s_attribute, cpos, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cl_cpos2lbound(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cl_cpos2lbound_try(corpusSEXP, s_attributeSEXP, cposSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos_to_lbound
Rcpp::IntegerVector cpos_to_lbound(SEXP s_attr, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos_to_lbound_try(SEXP s_attrSEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos_to_lbound(s_attr, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos_to_lbound(SEXP s_attrSEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos_to_lbound_try(s_attrSEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cl_cpos2rbound
Rcpp::IntegerVector cl_cpos2rbound(SEXP corpus, SEXP s_attribute, Rcpp::IntegerVector cpos, SEXP registry);
static SEXP _RcppCWB_cl_cpos2rbound_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(cl_cpos2rbound(corpus, s_attribute, cpos, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cl_cpos2rbound(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP cposSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cl_cpos2rbound_try(corpusSEXP, s_attributeSEXP, cposSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpos_to_rbound
Rcpp::IntegerVector cpos_to_rbound(SEXP s_attr, Rcpp::IntegerVector cpos);
static SEXP _RcppCWB_cpos_to_rbound_try(SEXP s_attrSEXP, SEXP cposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type s_attr(s_attrSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type cpos(cposSEXP);
    rcpp_result_gen = Rcpp::wrap(cpos_to_rbound(s_attr, cpos));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cpos_to_rbound(SEXP s_attrSEXP, SEXP cposSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cpos_to_rbound_try(s_attrSEXP, cposSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_find_corpus
SEXP _cl_find_corpus(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__cl_find_corpus_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_find_corpus(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_find_corpus(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_find_corpus_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_new_attribute
SEXP _cl_new_attribute(SEXP corpus_pointer, SEXP s_attribute, int type);
static SEXP _RcppCWB__cl_new_attribute_try(SEXP corpus_pointerSEXP, SEXP s_attributeSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus_pointer(corpus_pointerSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_new_attribute(corpus_pointer, s_attribute, type));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_new_attribute(SEXP corpus_pointerSEXP, SEXP s_attributeSEXP, SEXP typeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_new_attribute_try(corpus_pointerSEXP, s_attributeSEXP, typeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_delete_corpus
int _cl_delete_corpus(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__cl_delete_corpus_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_delete_corpus(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_delete_corpus(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_delete_corpus_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _corpus_is_loaded
int _corpus_is_loaded(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__corpus_is_loaded_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_corpus_is_loaded(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__corpus_is_loaded(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__corpus_is_loaded_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_charset_name
Rcpp::StringVector _cl_charset_name(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__cl_charset_name_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_charset_name(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_charset_name(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_charset_name_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _cl_struc_values
int _cl_struc_values(SEXP corpus, SEXP s_attribute, SEXP registry);
static SEXP _RcppCWB__cl_struc_values_try(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type s_attribute(s_attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_cl_struc_values(corpus, s_attribute, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__cl_struc_values(SEXP corpusSEXP, SEXP s_attributeSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__cl_struc_values_try(corpusSEXP, s_attributeSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _corpus_data_dir
Rcpp::StringVector _corpus_data_dir(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__corpus_data_dir_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_corpus_data_dir(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__corpus_data_dir(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__corpus_data_dir_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _corpus_info_file
Rcpp::StringVector _corpus_info_file(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__corpus_info_file_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_corpus_info_file(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__corpus_info_file(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__corpus_info_file_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// _corpus_full_name
Rcpp::StringVector _corpus_full_name(SEXP corpus, SEXP registry);
static SEXP _RcppCWB__corpus_full_name_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(_corpus_full_name(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB__corpus_full_name(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB__corpus_full_name_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// corpus_p_attributes
Rcpp::StringVector corpus_p_attributes(SEXP corpus, SEXP registry);
static SEXP _RcppCWB_corpus_p_attributes_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(corpus_p_attributes(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_corpus_p_attributes(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_corpus_p_attributes_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// corpus_s_attributes
Rcpp::StringVector corpus_s_attributes(SEXP corpus, SEXP registry);
static SEXP _RcppCWB_corpus_s_attributes_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(corpus_s_attributes(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_corpus_s_attributes(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_corpus_s_attributes_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// corpus_properties
Rcpp::StringVector corpus_properties(SEXP corpus, SEXP registry);
static SEXP _RcppCWB_corpus_properties_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(corpus_properties(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_corpus_properties(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_corpus_properties_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// corpus_property
Rcpp::StringVector corpus_property(SEXP corpus, SEXP registry, SEXP property);
static SEXP _RcppCWB_corpus_property_try(SEXP corpusSEXP, SEXP registrySEXP, SEXP propertySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    Rcpp::traits::input_parameter< SEXP >::type property(propertySEXP);
    rcpp_result_gen = Rcpp::wrap(corpus_property(corpus, registry, property));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_corpus_property(SEXP corpusSEXP, SEXP registrySEXP, SEXP propertySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_corpus_property_try(corpusSEXP, registrySEXP, propertySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cl_load_corpus
int cl_load_corpus(SEXP corpus, SEXP registry);
static SEXP _RcppCWB_cl_load_corpus_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(cl_load_corpus(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cl_load_corpus(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cl_load_corpus_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cl_list_corpora
Rcpp::StringVector cl_list_corpora();
static SEXP _RcppCWB_cl_list_corpora_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(cl_list_corpora());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cl_list_corpora() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cl_list_corpora_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// corpus_registry_dir
Rcpp::StringVector corpus_registry_dir(SEXP corpus);
static SEXP _RcppCWB_corpus_registry_dir_try(SEXP corpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    rcpp_result_gen = Rcpp::wrap(corpus_registry_dir(corpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_corpus_registry_dir(SEXP corpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_corpus_registry_dir_try(corpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// init_cqp
void init_cqp();
static SEXP _RcppCWB_init_cqp_try() {
BEGIN_RCPP
    init_cqp();
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_init_cqp() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_init_cqp_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_verbosity
void cqp_verbosity(int quietly, int verbose);
static SEXP _RcppCWB_cqp_verbosity_try(SEXP quietlySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< int >::type quietly(quietlySEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    cqp_verbosity(quietly, verbose);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_verbosity(SEXP quietlySEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_verbosity_try(quietlySEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_get_registry
Rcpp::StringVector cqp_get_registry();
static SEXP _RcppCWB_cqp_get_registry_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(cqp_get_registry());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_get_registry() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_get_registry_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_get_status
int cqp_get_status();
static SEXP _RcppCWB_cqp_get_status_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(cqp_get_status());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_get_status() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_get_status_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_set_registry
SEXP cqp_set_registry(SEXP registry_dir);
static SEXP _RcppCWB_cqp_set_registry_try(SEXP registry_dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type registry_dir(registry_dirSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_set_registry(registry_dir));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_set_registry(SEXP registry_dirSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_set_registry_try(registry_dirSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_list_corpora
Rcpp::StringVector cqp_list_corpora();
static SEXP _RcppCWB_cqp_list_corpora_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(cqp_list_corpora());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_list_corpora() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_list_corpora_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_query
SEXP cqp_query(SEXP corpus, SEXP subcorpus, SEXP query);
static SEXP _RcppCWB_cqp_query_try(SEXP corpusSEXP, SEXP subcorpusSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type subcorpus(subcorpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type query(querySEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_query(corpus, subcorpus, query));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_query(SEXP corpusSEXP, SEXP subcorpusSEXP, SEXP querySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_query_try(corpusSEXP, subcorpusSEXP, querySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_subcorpus_size
int cqp_subcorpus_size(SEXP scorpus);
static SEXP _RcppCWB_cqp_subcorpus_size_try(SEXP scorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type scorpus(scorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_subcorpus_size(scorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_subcorpus_size(SEXP scorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_subcorpus_size_try(scorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_list_subcorpora
Rcpp::StringVector cqp_list_subcorpora(SEXP inCorpus);
static SEXP _RcppCWB_cqp_list_subcorpora_try(SEXP inCorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type inCorpus(inCorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_list_subcorpora(inCorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_list_subcorpora(SEXP inCorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_list_subcorpora_try(inCorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_dump_subcorpus
Rcpp::IntegerMatrix cqp_dump_subcorpus(SEXP inSubcorpus);
static SEXP _RcppCWB_cqp_dump_subcorpus_try(SEXP inSubcorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type inSubcorpus(inSubcorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_dump_subcorpus(inSubcorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_dump_subcorpus(SEXP inSubcorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_dump_subcorpus_try(inSubcorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_subcorpus_regions
Rcpp::IntegerMatrix cqp_subcorpus_regions(SEXP subcorpus);
static SEXP _RcppCWB_cqp_subcorpus_regions_try(SEXP subcorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type subcorpus(subcorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_subcorpus_regions(subcorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_subcorpus_regions(SEXP subcorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_subcorpus_regions_try(subcorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_drop_subcorpus
SEXP cqp_drop_subcorpus(SEXP inSubcorpus);
static SEXP _RcppCWB_cqp_drop_subcorpus_try(SEXP inSubcorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type inSubcorpus(inSubcorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_drop_subcorpus(inSubcorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_drop_subcorpus(SEXP inSubcorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_drop_subcorpus_try(inSubcorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// check_corpus
int check_corpus(SEXP corpus);
static SEXP _RcppCWB_check_corpus_try(SEXP corpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    rcpp_result_gen = Rcpp::wrap(check_corpus(corpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_check_corpus(SEXP corpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_check_corpus_try(corpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cqp_load_corpus
int cqp_load_corpus(SEXP corpus, SEXP registry);
static SEXP _RcppCWB_cqp_load_corpus_try(SEXP corpusSEXP, SEXP registrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry(registrySEXP);
    rcpp_result_gen = Rcpp::wrap(cqp_load_corpus(corpus, registry));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cqp_load_corpus(SEXP corpusSEXP, SEXP registrySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cqp_load_corpus_try(corpusSEXP, registrySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// region_matrix_to_subcorpus
SEXP region_matrix_to_subcorpus(Rcpp::IntegerMatrix region_matrix, SEXP corpus, SEXP subcorpus);
static SEXP _RcppCWB_region_matrix_to_subcorpus_try(SEXP region_matrixSEXP, SEXP corpusSEXP, SEXP subcorpusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type region_matrix(region_matrixSEXP);
    Rcpp::traits::input_parameter< SEXP >::type corpus(corpusSEXP);
    Rcpp::traits::input_parameter< SEXP >::type subcorpus(subcorpusSEXP);
    rcpp_result_gen = Rcpp::wrap(region_matrix_to_subcorpus(region_matrix, corpus, subcorpus));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_region_matrix_to_subcorpus(SEXP region_matrixSEXP, SEXP corpusSEXP, SEXP subcorpusSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_region_matrix_to_subcorpus_try(region_matrixSEXP, corpusSEXP, subcorpusSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cwb_makeall
int cwb_makeall(SEXP x, SEXP registry_dir, SEXP p_attribute);
static SEXP _RcppCWB_cwb_makeall_try(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry_dir(registry_dirSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(cwb_makeall(x, registry_dir, p_attribute));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cwb_makeall(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cwb_makeall_try(xSEXP, registry_dirSEXP, p_attributeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cwb_huffcode
int cwb_huffcode(SEXP x, SEXP registry_dir, SEXP p_attribute);
static SEXP _RcppCWB_cwb_huffcode_try(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry_dir(registry_dirSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(cwb_huffcode(x, registry_dir, p_attribute));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cwb_huffcode(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cwb_huffcode_try(xSEXP, registry_dirSEXP, p_attributeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cwb_compress_rdx
int cwb_compress_rdx(SEXP x, SEXP registry_dir, SEXP p_attribute);
static SEXP _RcppCWB_cwb_compress_rdx_try(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type registry_dir(registry_dirSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p_attribute(p_attributeSEXP);
    rcpp_result_gen = Rcpp::wrap(cwb_compress_rdx(x, registry_dir, p_attribute));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cwb_compress_rdx(SEXP xSEXP, SEXP registry_dirSEXP, SEXP p_attributeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cwb_compress_rdx_try(xSEXP, registry_dirSEXP, p_attributeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cwb_encode
int cwb_encode(SEXP regfile, SEXP data_dir, SEXP vrt_dir, SEXP encoding, Rcpp::StringVector p_attributes, Rcpp::StringVector s_attributes_anno, Rcpp::StringVector s_attributes_noanno, int skip_blank_lines, int strip_whitespace, int xml, int quiet, int verbosity);
static SEXP _RcppCWB_cwb_encode_try(SEXP regfileSEXP, SEXP data_dirSEXP, SEXP vrt_dirSEXP, SEXP encodingSEXP, SEXP p_attributesSEXP, SEXP s_attributes_annoSEXP, SEXP s_attributes_noannoSEXP, SEXP skip_blank_linesSEXP, SEXP strip_whitespaceSEXP, SEXP xmlSEXP, SEXP quietSEXP, SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type regfile(regfileSEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_dir(data_dirSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vrt_dir(vrt_dirSEXP);
    Rcpp::traits::input_parameter< SEXP >::type encoding(encodingSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type p_attributes(p_attributesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type s_attributes_anno(s_attributes_annoSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type s_attributes_noanno(s_attributes_noannoSEXP);
    Rcpp::traits::input_parameter< int >::type skip_blank_lines(skip_blank_linesSEXP);
    Rcpp::traits::input_parameter< int >::type strip_whitespace(strip_whitespaceSEXP);
    Rcpp::traits::input_parameter< int >::type xml(xmlSEXP);
    Rcpp::traits::input_parameter< int >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< int >::type verbosity(verbositySEXP);
    rcpp_result_gen = Rcpp::wrap(cwb_encode(regfile, data_dir, vrt_dir, encoding, p_attributes, s_attributes_anno, s_attributes_noanno, skip_blank_lines, strip_whitespace, xml, quiet, verbosity));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _RcppCWB_cwb_encode(SEXP regfileSEXP, SEXP data_dirSEXP, SEXP vrt_dirSEXP, SEXP encodingSEXP, SEXP p_attributesSEXP, SEXP s_attributes_annoSEXP, SEXP s_attributes_noannoSEXP, SEXP skip_blank_linesSEXP, SEXP strip_whitespaceSEXP, SEXP xmlSEXP, SEXP quietSEXP, SEXP verbositySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_RcppCWB_cwb_encode_try(regfileSEXP, data_dirSEXP, vrt_dirSEXP, encodingSEXP, p_attributesSEXP, s_attributes_annoSEXP, s_attributes_noannoSEXP, skip_blank_linesSEXP, strip_whitespaceSEXP, xmlSEXP, quietSEXP, verbositySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _RcppCWB_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::StringVector(*.cwb_version)()");
        signatures.insert("Rcpp::StringVector(*p_attr_default)()");
        signatures.insert("SEXP(*s_attr)(SEXP,SEXP,SEXP)");
        signatures.insert("SEXP(*p_attr)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*attribute_size)(SEXP,SEXP,SEXP,SEXP)");
        signatures.insert("int(*p_attr_size)(SEXP)");
        signatures.insert("int(*s_attr_size)(SEXP)");
        signatures.insert("int(*p_attr_lexicon_size)(SEXP)");
        signatures.insert("int(*.cl_lexicon_size)(SEXP,SEXP,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*.cl_cpos2struc)(SEXP,SEXP,Rcpp::IntegerVector,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*cpos_to_struc)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::StringVector(*cpos2str)(SEXP,SEXP,SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::StringVector(*cpos_to_str)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*cpos2id)(SEXP,SEXP,SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*cpos_to_id)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*struc2cpos)(SEXP,SEXP,SEXP,int)");
        signatures.insert("Rcpp::IntegerVector(*struc_to_cpos)(SEXP,int)");
        signatures.insert("Rcpp::StringVector(*id2str)(SEXP,SEXP,SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::StringVector(*.cl_struc2str)(SEXP,SEXP,Rcpp::IntegerVector,SEXP)");
        signatures.insert("Rcpp::StringVector(*struc_to_str)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*.cl_regex2id)(SEXP,SEXP,SEXP,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*regex_to_id)(SEXP,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*.cl_str2id)(SEXP,SEXP,Rcpp::StringVector,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*str_to_id)(SEXP,Rcpp::StringVector)");
        signatures.insert("Rcpp::IntegerVector(*.cl_id2freq)(SEXP,SEXP,Rcpp::IntegerVector,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*id_to_freq)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*.cl_id2cpos)(SEXP,SEXP,SEXP,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*id_to_cpos)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*cl_cpos2lbound)(SEXP,SEXP,Rcpp::IntegerVector,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*cpos_to_lbound)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("Rcpp::IntegerVector(*cl_cpos2rbound)(SEXP,SEXP,Rcpp::IntegerVector,SEXP)");
        signatures.insert("Rcpp::IntegerVector(*cpos_to_rbound)(SEXP,Rcpp::IntegerVector)");
        signatures.insert("SEXP(*.cl_find_corpus)(SEXP,SEXP)");
        signatures.insert("SEXP(*.cl_new_attribute)(SEXP,SEXP,int)");
        signatures.insert("int(*.cl_delete_corpus)(SEXP,SEXP)");
        signatures.insert("int(*.corpus_is_loaded)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.cl_charset_name)(SEXP,SEXP)");
        signatures.insert("int(*.cl_struc_values)(SEXP,SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_data_dir)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_info_file)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_full_name)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_p_attributes)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_s_attributes)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_properties)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.corpus_property)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*.cl_load_corpus)(SEXP,SEXP)");
        signatures.insert("Rcpp::StringVector(*.cl_list_corpora)()");
        signatures.insert("Rcpp::StringVector(*.corpus_registry_dir)(SEXP)");
        signatures.insert("void(*.init_cqp)()");
        signatures.insert("void(*.cqp_verbosity)(int,int)");
        signatures.insert("Rcpp::StringVector(*.cqp_get_registry)()");
        signatures.insert("int(*.cqp_get_status)()");
        signatures.insert("SEXP(*.cqp_set_registry)(SEXP)");
        signatures.insert("Rcpp::StringVector(*.cqp_list_corpora)()");
        signatures.insert("SEXP(*.cqp_query)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*.cqp_subcorpus_size)(SEXP)");
        signatures.insert("Rcpp::StringVector(*.cqp_list_subcorpora)(SEXP)");
        signatures.insert("Rcpp::IntegerMatrix(*.cqp_dump_subcorpus)(SEXP)");
        signatures.insert("Rcpp::IntegerMatrix(*.cqp_subcorpus_regions)(SEXP)");
        signatures.insert("SEXP(*.cqp_drop_subcorpus)(SEXP)");
        signatures.insert("int(*.check_corpus)(SEXP)");
        signatures.insert("int(*.cqp_load_corpus)(SEXP,SEXP)");
        signatures.insert("SEXP(*.region_matrix_to_subcorpus)(Rcpp::IntegerMatrix,SEXP,SEXP)");
        signatures.insert("int(*.cwb_makeall)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*.cwb_huffcode)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*.cwb_compress_rdx)(SEXP,SEXP,SEXP)");
        signatures.insert("int(*.cwb_encode)(SEXP,SEXP,SEXP,SEXP,Rcpp::StringVector,Rcpp::StringVector,Rcpp::StringVector,int,int,int,int,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _RcppCWB_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cwb_version", (DL_FUNC)_RcppCWB_cwb_version_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_p_attr_default", (DL_FUNC)_RcppCWB_p_attr_default_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_s_attr", (DL_FUNC)_RcppCWB_s_attr_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_p_attr", (DL_FUNC)_RcppCWB_p_attr_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_attribute_size", (DL_FUNC)_RcppCWB_attribute_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_p_attr_size", (DL_FUNC)_RcppCWB_p_attr_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_s_attr_size", (DL_FUNC)_RcppCWB_s_attr_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_p_attr_lexicon_size", (DL_FUNC)_RcppCWB_p_attr_lexicon_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_lexicon_size", (DL_FUNC)_RcppCWB__cl_lexicon_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_cpos2struc", (DL_FUNC)_RcppCWB__cl_cpos2struc_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos_to_struc", (DL_FUNC)_RcppCWB_cpos_to_struc_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos2str", (DL_FUNC)_RcppCWB_cpos2str_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos_to_str", (DL_FUNC)_RcppCWB_cpos_to_str_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos2id", (DL_FUNC)_RcppCWB_cpos2id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos_to_id", (DL_FUNC)_RcppCWB_cpos_to_id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_struc2cpos", (DL_FUNC)_RcppCWB_struc2cpos_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_struc_to_cpos", (DL_FUNC)_RcppCWB_struc_to_cpos_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_id2str", (DL_FUNC)_RcppCWB_id2str_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_struc2str", (DL_FUNC)_RcppCWB__cl_struc2str_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_struc_to_str", (DL_FUNC)_RcppCWB_struc_to_str_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_regex2id", (DL_FUNC)_RcppCWB__cl_regex2id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_regex_to_id", (DL_FUNC)_RcppCWB_regex_to_id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_str2id", (DL_FUNC)_RcppCWB__cl_str2id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_str_to_id", (DL_FUNC)_RcppCWB_str_to_id_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_id2freq", (DL_FUNC)_RcppCWB__cl_id2freq_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_id_to_freq", (DL_FUNC)_RcppCWB_id_to_freq_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_id2cpos", (DL_FUNC)_RcppCWB__cl_id2cpos_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_id_to_cpos", (DL_FUNC)_RcppCWB_id_to_cpos_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cl_cpos2lbound", (DL_FUNC)_RcppCWB_cl_cpos2lbound_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos_to_lbound", (DL_FUNC)_RcppCWB_cpos_to_lbound_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cl_cpos2rbound", (DL_FUNC)_RcppCWB_cl_cpos2rbound_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_cpos_to_rbound", (DL_FUNC)_RcppCWB_cpos_to_rbound_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_find_corpus", (DL_FUNC)_RcppCWB__cl_find_corpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_new_attribute", (DL_FUNC)_RcppCWB__cl_new_attribute_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_delete_corpus", (DL_FUNC)_RcppCWB__cl_delete_corpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_is_loaded", (DL_FUNC)_RcppCWB__corpus_is_loaded_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_charset_name", (DL_FUNC)_RcppCWB__cl_charset_name_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_struc_values", (DL_FUNC)_RcppCWB__cl_struc_values_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_data_dir", (DL_FUNC)_RcppCWB__corpus_data_dir_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_info_file", (DL_FUNC)_RcppCWB__corpus_info_file_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_full_name", (DL_FUNC)_RcppCWB__corpus_full_name_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_p_attributes", (DL_FUNC)_RcppCWB_corpus_p_attributes_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_s_attributes", (DL_FUNC)_RcppCWB_corpus_s_attributes_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_properties", (DL_FUNC)_RcppCWB_corpus_properties_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_property", (DL_FUNC)_RcppCWB_corpus_property_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_load_corpus", (DL_FUNC)_RcppCWB_cl_load_corpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cl_list_corpora", (DL_FUNC)_RcppCWB_cl_list_corpora_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.corpus_registry_dir", (DL_FUNC)_RcppCWB_corpus_registry_dir_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.init_cqp", (DL_FUNC)_RcppCWB_init_cqp_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_verbosity", (DL_FUNC)_RcppCWB_cqp_verbosity_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_get_registry", (DL_FUNC)_RcppCWB_cqp_get_registry_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_get_status", (DL_FUNC)_RcppCWB_cqp_get_status_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_set_registry", (DL_FUNC)_RcppCWB_cqp_set_registry_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_list_corpora", (DL_FUNC)_RcppCWB_cqp_list_corpora_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_query", (DL_FUNC)_RcppCWB_cqp_query_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_subcorpus_size", (DL_FUNC)_RcppCWB_cqp_subcorpus_size_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_list_subcorpora", (DL_FUNC)_RcppCWB_cqp_list_subcorpora_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_dump_subcorpus", (DL_FUNC)_RcppCWB_cqp_dump_subcorpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_subcorpus_regions", (DL_FUNC)_RcppCWB_cqp_subcorpus_regions_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_drop_subcorpus", (DL_FUNC)_RcppCWB_cqp_drop_subcorpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.check_corpus", (DL_FUNC)_RcppCWB_check_corpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cqp_load_corpus", (DL_FUNC)_RcppCWB_cqp_load_corpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.region_matrix_to_subcorpus", (DL_FUNC)_RcppCWB_region_matrix_to_subcorpus_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cwb_makeall", (DL_FUNC)_RcppCWB_cwb_makeall_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cwb_huffcode", (DL_FUNC)_RcppCWB_cwb_huffcode_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cwb_compress_rdx", (DL_FUNC)_RcppCWB_cwb_compress_rdx_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_.cwb_encode", (DL_FUNC)_RcppCWB_cwb_encode_try);
    R_RegisterCCallable("RcppCWB", "_RcppCWB_RcppExport_validate", (DL_FUNC)_RcppCWB_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppCWB_decode_s_attribute", (DL_FUNC) &_RcppCWB_decode_s_attribute, 3},
    {"_RcppCWB_get_count_vector", (DL_FUNC) &_RcppCWB_get_count_vector, 3},
    {"_RcppCWB_get_region_matrix", (DL_FUNC) &_RcppCWB_get_region_matrix, 4},
    {"_RcppCWB_get_cbow_matrix", (DL_FUNC) &_RcppCWB_get_cbow_matrix, 5},
    {"_RcppCWB_region_matrix_to_ids", (DL_FUNC) &_RcppCWB_region_matrix_to_ids, 4},
    {"_RcppCWB_ranges_to_cpos", (DL_FUNC) &_RcppCWB_ranges_to_cpos, 1},
    {"_RcppCWB_ids_to_count_matrix", (DL_FUNC) &_RcppCWB_ids_to_count_matrix, 1},
    {"_RcppCWB_region_matrix_to_count_matrix", (DL_FUNC) &_RcppCWB_region_matrix_to_count_matrix, 4},
    {"_RcppCWB_region_matrix_context", (DL_FUNC) &_RcppCWB_region_matrix_context, 8},
    {"_RcppCWB_region_matrix_to_struc_matrix", (DL_FUNC) &_RcppCWB_region_matrix_to_struc_matrix, 4},
    {"_RcppCWB_region_to_strucs", (DL_FUNC) &_RcppCWB_region_to_strucs, 4},
    {"_RcppCWB_cwb_version", (DL_FUNC) &_RcppCWB_cwb_version, 0},
    {"_RcppCWB_p_attr_default", (DL_FUNC) &_RcppCWB_p_attr_default, 0},
    {"_RcppCWB_s_attr", (DL_FUNC) &_RcppCWB_s_attr, 3},
    {"_RcppCWB_p_attr", (DL_FUNC) &_RcppCWB_p_attr, 3},
    {"_RcppCWB_attribute_size", (DL_FUNC) &_RcppCWB_attribute_size, 4},
    {"_RcppCWB_p_attr_size", (DL_FUNC) &_RcppCWB_p_attr_size, 1},
    {"_RcppCWB_s_attr_size", (DL_FUNC) &_RcppCWB_s_attr_size, 1},
    {"_RcppCWB_p_attr_lexicon_size", (DL_FUNC) &_RcppCWB_p_attr_lexicon_size, 1},
    {"_RcppCWB__cl_lexicon_size", (DL_FUNC) &_RcppCWB__cl_lexicon_size, 3},
    {"_RcppCWB__cl_cpos2struc", (DL_FUNC) &_RcppCWB__cl_cpos2struc, 4},
    {"_RcppCWB_cpos_to_struc", (DL_FUNC) &_RcppCWB_cpos_to_struc, 2},
    {"_RcppCWB_cpos2str", (DL_FUNC) &_RcppCWB_cpos2str, 4},
    {"_RcppCWB_cpos_to_str", (DL_FUNC) &_RcppCWB_cpos_to_str, 2},
    {"_RcppCWB_cpos2id", (DL_FUNC) &_RcppCWB_cpos2id, 4},
    {"_RcppCWB_cpos_to_id", (DL_FUNC) &_RcppCWB_cpos_to_id, 2},
    {"_RcppCWB_struc2cpos", (DL_FUNC) &_RcppCWB_struc2cpos, 4},
    {"_RcppCWB_struc_to_cpos", (DL_FUNC) &_RcppCWB_struc_to_cpos, 2},
    {"_RcppCWB_id2str", (DL_FUNC) &_RcppCWB_id2str, 4},
    {"_RcppCWB__cl_struc2str", (DL_FUNC) &_RcppCWB__cl_struc2str, 4},
    {"_RcppCWB_struc_to_str", (DL_FUNC) &_RcppCWB_struc_to_str, 2},
    {"_RcppCWB__cl_regex2id", (DL_FUNC) &_RcppCWB__cl_regex2id, 4},
    {"_RcppCWB_regex_to_id", (DL_FUNC) &_RcppCWB_regex_to_id, 2},
    {"_RcppCWB__cl_str2id", (DL_FUNC) &_RcppCWB__cl_str2id, 4},
    {"_RcppCWB_str_to_id", (DL_FUNC) &_RcppCWB_str_to_id, 2},
    {"_RcppCWB__cl_id2freq", (DL_FUNC) &_RcppCWB__cl_id2freq, 4},
    {"_RcppCWB_id_to_freq", (DL_FUNC) &_RcppCWB_id_to_freq, 2},
    {"_RcppCWB__cl_id2cpos", (DL_FUNC) &_RcppCWB__cl_id2cpos, 4},
    {"_RcppCWB_id_to_cpos", (DL_FUNC) &_RcppCWB_id_to_cpos, 2},
    {"_RcppCWB_cl_cpos2lbound", (DL_FUNC) &_RcppCWB_cl_cpos2lbound, 4},
    {"_RcppCWB_cpos_to_lbound", (DL_FUNC) &_RcppCWB_cpos_to_lbound, 2},
    {"_RcppCWB_cl_cpos2rbound", (DL_FUNC) &_RcppCWB_cl_cpos2rbound, 4},
    {"_RcppCWB_cpos_to_rbound", (DL_FUNC) &_RcppCWB_cpos_to_rbound, 2},
    {"_RcppCWB__cl_find_corpus", (DL_FUNC) &_RcppCWB__cl_find_corpus, 2},
    {"_RcppCWB__cl_new_attribute", (DL_FUNC) &_RcppCWB__cl_new_attribute, 3},
    {"_RcppCWB__cl_delete_corpus", (DL_FUNC) &_RcppCWB__cl_delete_corpus, 2},
    {"_RcppCWB__corpus_is_loaded", (DL_FUNC) &_RcppCWB__corpus_is_loaded, 2},
    {"_RcppCWB__cl_charset_name", (DL_FUNC) &_RcppCWB__cl_charset_name, 2},
    {"_RcppCWB__cl_struc_values", (DL_FUNC) &_RcppCWB__cl_struc_values, 3},
    {"_RcppCWB__corpus_data_dir", (DL_FUNC) &_RcppCWB__corpus_data_dir, 2},
    {"_RcppCWB__corpus_info_file", (DL_FUNC) &_RcppCWB__corpus_info_file, 2},
    {"_RcppCWB__corpus_full_name", (DL_FUNC) &_RcppCWB__corpus_full_name, 2},
    {"_RcppCWB_corpus_p_attributes", (DL_FUNC) &_RcppCWB_corpus_p_attributes, 2},
    {"_RcppCWB_corpus_s_attributes", (DL_FUNC) &_RcppCWB_corpus_s_attributes, 2},
    {"_RcppCWB_corpus_properties", (DL_FUNC) &_RcppCWB_corpus_properties, 2},
    {"_RcppCWB_corpus_property", (DL_FUNC) &_RcppCWB_corpus_property, 3},
    {"_RcppCWB_cl_load_corpus", (DL_FUNC) &_RcppCWB_cl_load_corpus, 2},
    {"_RcppCWB_cl_list_corpora", (DL_FUNC) &_RcppCWB_cl_list_corpora, 0},
    {"_RcppCWB_corpus_registry_dir", (DL_FUNC) &_RcppCWB_corpus_registry_dir, 1},
    {"_RcppCWB_init_cqp", (DL_FUNC) &_RcppCWB_init_cqp, 0},
    {"_RcppCWB_cqp_verbosity", (DL_FUNC) &_RcppCWB_cqp_verbosity, 2},
    {"_RcppCWB_cqp_get_registry", (DL_FUNC) &_RcppCWB_cqp_get_registry, 0},
    {"_RcppCWB_cqp_get_status", (DL_FUNC) &_RcppCWB_cqp_get_status, 0},
    {"_RcppCWB_cqp_set_registry", (DL_FUNC) &_RcppCWB_cqp_set_registry, 1},
    {"_RcppCWB_cqp_list_corpora", (DL_FUNC) &_RcppCWB_cqp_list_corpora, 0},
    {"_RcppCWB_cqp_query", (DL_FUNC) &_RcppCWB_cqp_query, 3},
    {"_RcppCWB_cqp_subcorpus_size", (DL_FUNC) &_RcppCWB_cqp_subcorpus_size, 1},
    {"_RcppCWB_cqp_list_subcorpora", (DL_FUNC) &_RcppCWB_cqp_list_subcorpora, 1},
    {"_RcppCWB_cqp_dump_subcorpus", (DL_FUNC) &_RcppCWB_cqp_dump_subcorpus, 1},
    {"_RcppCWB_cqp_subcorpus_regions", (DL_FUNC) &_RcppCWB_cqp_subcorpus_regions, 1},
    {"_RcppCWB_cqp_drop_subcorpus", (DL_FUNC) &_RcppCWB_cqp_drop_subcorpus, 1},
    {"_RcppCWB_check_corpus", (DL_FUNC) &_RcppCWB_check_corpus, 1},
    {"_RcppCWB_cqp_load_corpus", (DL_FUNC) &_RcppCWB_cqp_load_corpus, 2},
    {"_RcppCWB_region_matrix_to_subcorpus", (DL_FUNC) &_RcppCWB_region_matrix_to_subcorpus, 3},
    {"_RcppCWB_cwb_makeall", (DL_FUNC) &_RcppCWB_cwb_makeall, 3},
    {"_RcppCWB_cwb_huffcode", (DL_FUNC) &_RcppCWB_cwb_huffcode, 3},
    {"_RcppCWB_cwb_compress_rdx", (DL_FUNC) &_RcppCWB_cwb_compress_rdx, 3},
    {"_RcppCWB_cwb_encode", (DL_FUNC) &_RcppCWB_cwb_encode, 12},
    {"_RcppCWB_RcppExport_registerCCallable", (DL_FUNC) &_RcppCWB_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppCWB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
