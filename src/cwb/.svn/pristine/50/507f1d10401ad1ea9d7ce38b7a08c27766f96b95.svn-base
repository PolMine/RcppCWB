=head1 NAME

cwb-encode - The CWB corpus encoding utility

=head1 SYNOPSIS

B<cwb-encode> [-xsBCvqDh] [-d I<data_directory>] [-R I<registry_file>] [-U I<string>] [-b I<num>] 
    [-c I<charset>] -f I<input_file> [...] -F I<input_directory> [...] [-p -|-p <attribute>] 
    (-P I<attribute>|-S I<attribute_spec>|-V I<attribute_spec>|-0 I<attribute>)*

... | B<cwb-encode> S<[I<options>] [I<declarations>]>


=head1 DESCRIPTION

B<cwb-encode> performs the first step in the indexing of a CWB corpus: it reads in vertical-format text,
and converts it to the CWB binary index format. 

CWB indexes consist of a set of binary files, held in some I<data directory>; the location of the data
files, as well as other metadata, is contained in a I<corpus registry> file. All CWB applications
use the registry files - usually collected together in a single registry directory - to access the
indexed corpora.

The B<cwb-encode> utility is what creates this setup in the first place. It processes a corpus in
verticalised format; this may be piped to B<cwb-encode>'s standard input from some other program,
or it may be loaded from one or more input files specified with the B<-f> option; see below.

In either case, the B<cwb-encode> command line describes both the structure of the data and specifies
details of the index to be generated, including the location of the data directory and the registry. The format
and location of the resulting index is determined by the configuration of B<cwb-encode>.

The purpose of this manual file is to explain the conventions for calling B<cwb-encode>. It does not attempt
to explain all the details of the CWB data model or how encoding is accomplished. Nor does it discuss how
B<cwb-encode> can be used to add additional attributes to an already-encoded corpus. For details on these other issues, 
please refer to the CWB project's I<CWB Encoding Tutorial> document. 

When B<cwb-encode> is invoked, as well as options, the p-attributes and s-attrributes of the corpus must be declared.
The declarations have the same format as options, but are B<not optional>!

P-attributes correspond to I<columns> in the input data. Each token occupies a single row and consists of
a series of tab-delimited values. Each tab-separated column is encoded as a separate p-attribute.
 
The first p-attribute in the input data is given the label I<word> by default, as it is assumed to represent
the form of the token, with addiitonal p-attributes representing word-level annotation. The B<-p> can be used to
change the default attribute label for the first column; additional columns must be declared with B<-P> flags. 

S-attributes can be declared with either B<-S> (without annotations) or B<-V> (with annotations). 
In the input data, they must appear as opening and closing XML tags on separate lines. Additional XML awareness
can be enabled with the B<-x> option. Note, however, that CWB is I<not> a fully XML-compliant application. 

For each encoded attribute, one or more data files are created in the current working directory 
(or in another directory specified with B<-d>). 

The overall name of the corpus is determined by the name of its registry file. Registry files contain a formalised 
description of an indexed corpus - where its data files are, what p- and s-attributes it has, and so on.
Registry file names are all-lowercase
and can contain the letters a to z (no accents), the underscore, the hyphen, and the digits 0 to 9. The name
of the corpus is then the uppercased version of that filename. You can write a registry file yourself, but it
is strongly recommended to let B<cwb-encode> do it for you using the B<-R> option.
  
After encoding, you should use B<cwb-makeall> to create the 
required index files and frequency lists, and then compress them with B<cwb-huffcode> and 
B<cwb-compress-rdx> (or preferably use the B<cwb-make> program from the CWB/Perl interface).

Two important notes on the usage of B<cwb-encode>:

=over 4

=item * Command-line I<options> (including input files specified with B<-f>) always have to 
precede the I<attribute declaration> flags!

=item * If you re-encode an existing corpus, be sure to delete all old data files, 
in particular the index and any compressed data files, before running B<cwb-encode>!

=back



=head1 OPTIONS

Please note that the CWB utilities do not currently support GNU-style C<--long-options>.

=over 4

=item B<-b> I<num>

Lexicon hash tables, where each hash contains a particular number of buckets of strings, are used in the indexing
process. This option allows the number of buckets to be set by the user. Users who do not already understand what hash table
buckets are do not need to understand this option.

=item B<-B>

Makes the encoding process strip leading/trailing space characters from input lines and p-attribute values. 
It is recommended to use this flag in most situations.

=item B<-c> I<charset>

Specifies the character encoding of the corpus data. I<charset> can be any of the following:

=over 4

=item ascii 

ASCII (7-bit characters only)

=item latin1 

ISO-8859-1 Western European

=item latin2 

ISO-8859-2 Central European

=item latin3 

ISO-8859-3 South European

=item latin4 

ISO-8859-4 North European

=item cyrillic 

ISO-8859-5 Latin/Cyrillic

=item arabic 

ISO-8859-6 Latin/Arabic

=item greek 

ISO-8859-7 Latin/Greek

=item hebrew 

ISO-8859-8 Latin/Hebrew

=item latin5 

ISO-8859-9 Turkish

=item latin6 

ISO-8859-10 Nordic

=item latin7 

ISO-8859-13 Baltic Rim

=item latin8 

ISO-8859-14 Celtic

=item latin9 

ISO-8859-15 Revised Western European

=item utf8 

Unicode (UTF-8 encoding)

=back

If this option is left unspecified, I<latin1> data will be assumed. Please note that we may change the default
character set to I<ascii> or I<utf8>, or even remove the default altogether (so that specifying a character set explicitly will be
obligatory), in future versions of CWB. For this reason you are recommended I<always> to supply a B<-c> declaration,
even if your corpus uses the default ISO-8859-1 character set. 

The input data will be checked for validity according to the specified character set, so it is important
to declare the correct encoding!

Note that, on Windows in particular, the most common encoding for plain text files is so-called "ANSI". Windows "ANSI"
files are also found in the wild on other types of computer. This encoding uses one of a number of different Windows
code pages, for instance
Windows-1256 in Arabic Windows, Windows-1252 in English and other Western European Windows, and so on.
Some Windows code pages are completely incompatible with the related ISO-8859
standard (e.g. Windows-1256 and ISO-8859-6 encode Arabic in contrary ways). Others implement a superset of ISO-8859. 
CWB I<does not> support these Windows code pages. In particular, please note that although similar,
Windows-1252 cannot be treated as if it were Latin1, because it contains some code points 
that are invalid in Latin1 (for example, the "curly quote marks", the en-dash, and the em-dash). If you have
Windows-1252 data, you I<must> either use the B<-C> option, or (preferably) recode it to Latin1 or UTF-8
before encoding.

=item B<-C>

Activates cleanup mode. In this mode, when a character occurs in the input data
that is not valid for the declared character encoding, instead of causing an error it will
be replaced by '?' in the indexed data. Please note that cleanup mode does not work
for UTF-8 data.

=item B<-d> I<data_directory>  

Specifies that the data files that make up the encoded corpus index should be placed in I<data_directory>.
It is very strongly recommended to keep each corpus index in a directory that contains absolutely nothing else.

This options must always be specified. If you want to use the current working directory, you should
specify C<-d .> . Note that the directory you specify must already exist - B<cwb-encode> will not create it for you.

=item B<-D>

Activates debug mode; additional messages about what B<cwb-encode> is doing will be printed on standard error.

=item B<-f> I<input_file> 

Specifies that the corpus to be indexed should be read from I<input_file>. 
  
This option can be repeated for as many files as necessary. Files will be added to the corpus in the order that
they are specified. If no input files are specified, data will be read
from standard input (in this case, it would normally be piped from another application such as B<cwb-decode>). 
Gzipped files whose names end C<.gz> will be decompressed automatically.

=item B<-F> I<input_directory>

Specifies that the corpus to be indexed should be read from all suitable files in F<input_directory>.

"Suitable files" are those with the extensions C<.vrt> or C<.vrt.gz>; 
files will be added to the corpus in alphabetical order (ASCII).

Multiple input directories can be specified (in which case each set of files will be alphabetically-ordered internally,
and the sets as a whole will be added in the order they are specified); but it is not possible to scan subdirectories recursively.

=item B<-h>

Displays B<cwb-encode>'s help message, with short information about the usage of the command line options.  
This usage message will be also shown if B<cwb-encode> is called with invalid options.
After the usage message is printed, B<cwb-encode> will exit.

=item B<-q>

Activates quiet mode; most warning messages will be suppressed.
  
=item B<-R> I<registry_file>   

Creates a registry entry (in the file I<registry_file>. 

The registry file is what gives the corpus its "name", that handle or label used to access it throughout CWB.

Corpus names have two format: all-lowercase and ALL-UPPERCASE. The registry filename uses the all-lowercase format,
whereas most programs (including CQP) use the all-uppercase format. 
This means that the actual filename specified with B<-R> must only contain lowercase Latin letters (digits 0-9, underscore,
and hyphen are also allowed). Due to character encoding issues, accented letters are not allowed in corpus names
(or in names of attributes) - but this does not apply to the path of the directory that contains the registry file.

So, if you specify C<-R /home/CORPORA/very_big_corpus>, then that file will be created, and will contain a
description of the index data (including where it is stored, what attributes there are, and so on). 
The corpus name that you use to access the corpus in CQP is then VERY_BIG_CORPUS.

If you do not use this option, you will need to create a registry file yourself before other CWB utilities
and CQP will be able to access the indexed corpus data. So use of B<-R> is very strongly recommended.

It is usual to put all your registry files in a special corpus registry directory. 

=item B<-s>

Makes the encoding process skip any empty lines in the input data. It is recommended to use this flag in most situations.

=item B<-t> I<input_file> 

Depracated synonym for B<-f>, preserved for backward compatibility.

=item B<-U> I<string>  

Specifies a string to be assigned as the value of an empty p-attribute. Any column with any empty rows
will be indexed as if it had contained this I<string> everywhere that a gap actually occurred.
The default string for use in such "missing columns" is C<__UNDEF__>.

=item B<-v>        
  
Activates verbose mode (progress messages will be printed on standard output while the corpus is being encoded).

=item B<-x>

Activates XML-aware mode. In this mode, the basic XML entities (&gt; &lt; &amp; &quot; &apos;)
will be replaced in the indexed corpus by the characters they represent. Also, any input lines that begin with an 
XML comment (C<<!...>) or an XML declaration (C<<?...>) will be ignored.

It is recommended to use this flag in most situations.

=back



=head1 ATTRIBUTE DECLARATIONS

Note that all names of attributes must be in ASCII and consist only of letters, numbers, hyphen and underscore.

=over 4

=item B<-p> I<attribute>

Changes the name of the default p-attribute (the first column) from "word" to I<attribute>.

=item B<-p> I<->

Declares that there is I<no> default p-attribute. In this case, all p-attributes, including
the first column, must be declared with B<-P>.

=item B<-P> I<attribute>  

Declares I<attribute> as a p-attribute. The order in which the p-attributes are declared
must reflect the order of the columns they refer to in the input data.

If  / is appended to the name of a p-attribute, the contents of that p-attribute are marked as a feature set.
In this case, the values within the feature set will be validated and normalised.


=item B<-S> I<attribute_spec>

Declares an s-attribute without annotations.

I<attribute_spec> is the name of the attribute (i.e. the XML tag it corresponds to in the input data),
optionally followed by additional specifications, as follows.

=over 4

=item *

It is normally assumed that s-attribute regions will not be nested within another region of the same
s-attribute. If you append I<:num> to the
attribute specification, then up to I<num> levels of nesting are allowed, with the nested regions automatically
renamed. So, for instance, if you specify I<np:3> then the <np> element can be nested up to a depth of 3,
with extra s-attributes I<np1>, I<np2> etc. generated automatically for the nested instances.

If you specify I<:0>, all nested regions will be ignored (highly recommended, otherwise every start tag will 
begin a new flat region).
  
=item * 

XML attribute-value pairs can be auto-split and indexed as separate s-attributes. In this case, you should append
the relevant attribute names to the attribute specification using + signs.

For example, C<-S s:0+id+len> stores XML tags like C<<s id="abc" len=42>> in s-attributes s, s_id and s_len.

=item *

The values of XML tag attributes can be feature sets; you can append / to the relevant label
to switch on format validation and normalisation (e.g. C<-S np:2+agr/+head>).

=back

S-attributes declared with -S are "without annotations" because the instances of these s-attributes are not linked 
to particular values. To take the example above, when we index C<-S s:0+id+len>, then the line C<<s id="abc" len=42>>
generates three s-attribute instances: one instance of C<s> which has no value; one instance of C<s_id> 
which has the value I<abc>; and one instance of C<s_len> which has the value I<42>. 
While the split-off s-attributes have values, the top-level s-attribute based on the actual XML element does not. 
This means that any XML attribute-values that are not split off as separate S-attributes are lost. 

It is possible for top-level attributes to have values, however, if they are declared with B<-V> instead of B<-S>.
See below.

=item B<-V> I<attribute_spec>

Declares an s-attribute with annotations (a "valued" s-attribute).

See the discussion under B<-S> for an explanation of what it means for an S-attribute to have annotations ("values")
or not. When an S-attribute is declared with B<-V>, each instance of that attribute has a value consisting of the
original XML element's set of attribute-value pairs, stored as a single string. This is I<in addition> to creating
extra S-attributes for any XML attributes named in the usual I<element+att> manner. 

So for instance, when we index C<-V s:0+id+len>, then the line C<<s id="abc" len=42>>
generates three s-attribute instances: one instance of C<s> which has the value I<id="abc" len=42>;
one instance of C<s_id> which has the value I<abc>; and one instance of C<s_len> which has the value I<42>. 

Declaring S-attributes with B<-V> has the advantage that the input XML is fully reconstructible from the CWB index.
However, these annotations are not usually easily to search and manipulate. For searching in CQP, explicit declaration
of the XML attributes so that they will be split off as independent s-attributes is preferable.

Annotations can be features sets; append / to the relevant label to switch on format validation and normalisation.

See also discussion under B<-S> above.

=item B<-0> I<attribute>

Declares I<attribute> as a null s-attribute. All XML tags that match a null s-attribute will be ignored
and discarded from the input data.

=back

All XML tags that have not been declared with a B<-S>, B<-V> or B<-0> flag will be encoded as literal tokens
(without annotations), accompanied by a warning message.


=head1 LIMITS ON NUMBER OF ATTRIBUTES

B<cwb-encode> has a built-in limit on the number of attributes it can create, namely 2,048 attributes,
of which at most 1,024 can be p-attributes and at most 1,024 can be s-attributes.

Note, however, that encoding a corpus requires a large number of files to be created simultaneously,
and most operating systems put a limit on the number of files a program is allowed to have open
at the same time. How you discover this limit is dependent on your operating system and, perhaps, your
shell; if you are using the popular B<bash> shell, you can find out what the maximum number of open files 
is with the command C<ulimit -n>. A common value, especially on Linux, is 1,024.

A good rule of thumb for working with this OS-imposed limit is that each attribute requires three files.
(The exception: s-attributes without annotations only require one file to be created.)
So, if you are working in an environment which imposes the 1,024-file limit, the maximum number
of attributes that you can be sure of creating safely create is 341 (one-third of 1,024).

It is possible to add more attributes using subsequent additional runs of B<cwb-encode> (for p-attributes)
or using B<cwb-s-encode> (for s-attributes).


=head1 INPUT FILE FORMAT

The following is a summary of the rules for CWB input files; for more details, DESCRIPTION above, 
and the I<CWB Encoding Tutorial>:

=over 4

=item * The file must comply throughout with the character encoding that has been declared for the corpus.

=item * UTF-8 files may (but do not have to) begin with the byte-order mark.

=item * Files must contain one token per line.

=item * Most punctuation marks should normally count as independent tokens, on lines of their own.

=item * Each line consists of a series of tab-delimited p-attributes.

=item * The p-attributes must come in the same order on every line.

=item * The first p-attribute is assumed to be the token wordform unless you specify otherwise (see above).

=item * P-attribute values may have the form of feature sets; see the I<CWB Encoding Tutorial>.

=item * Files may also contain lines that specify begin and/or end-points of s-attrbiutes.

=item * These are given as XML tags, optionally with attributes.

=item * XML attributes can also be have the form of feature sets; see the I<CWB Encoding Tutorial>.

=item * A line which contains an XML tag can contain only that one tag, and nothing else.

=item * In XML mode, XML comments and declarations are also allowed, but must occupy individual lines.

=item * Stray whitespace (extra spaces, empty lines) is not allowed, unless the B<-b> and B<-s> options are used.

=back



=head1 SEE ALSO

L<cqp>, L<cqpcl>, L<cqpserver>, L<cwb-makeall>, L<cwb-huffcode>, L<cwb-compress-rdx>, 
L<cwb-align-encode>, L<cwb-s-encode>, L<cwb-decode>, L<cwb-align-decode>, L<cwb-lexdecode>, L<cwb-s-decode>,
L<cwb-config>, L<cwb-describe-corpus>, L<cwb-atoi>, L<cwb-itoa>,


=head1 COPYRIGHT

B<IMS Open Corpus Workbench (CWB)> L<http://cwb.sourceforge.net/>

Copyright (C) 1993-2006 by IMS, University of Stuttgart

Copyright (C) 2007- by the respective contributers (see file F<AUTHORS>)

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details
(in the file F<COPYING>, or available via WWW at
L<http://www.gnu.org/copyleft/gpl.html>).

=cut

