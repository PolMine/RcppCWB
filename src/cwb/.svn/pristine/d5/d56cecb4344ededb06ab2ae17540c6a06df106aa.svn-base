=head1 NAME

cwb-scan-corpus - Extract n-gram frequency information from a CWB corpus

=head1 SYNOPSIS

B<cwb-scan-corpus> [-Cqh] [-r I<registry_dir>] [-b I<num>]
    [-o I<file>] [-f I<n>] [-F I<attribute>]
    [-s I<start>] [-e I<end>] [-R I<file>]
    I<corpus>  I<key1> I<key2> ...

=head1 DESCRIPTION

B<cwb-scan-corpus> is a utility for flexibly extracting frequency information
from a CWB-encoded corpus. This is not limited only to frequencies from a single
corpus attribute, or a single token position; rather, the program computes the
joint frequency distribution over a set of specified keys. What this means is that
B<cwb-scan-corpus> finds all the different combinations of values that occur for that
particular juxtaposition of keys, and reports each combination along with its 
frequency in the corpus.

The most basic use would be with a single key that represents a single p-attribute
(let's say, C<word>). In this case, the output is equivalent to a frequency list
for that p-attribute: a list of all types, and the number of tokens that occur for
each. However, if a second key is added - say, C<word+1> for the following token -
then we get a frequency list of bigrams instead. The frequencies of individual words
are no longer reported - rather the frequencies of every different combination of
words occuring in a sequence with one directly after the other.

Alternatively, a second p-attribute on the same position could be specified:
C<word pos> . In this case, it is the word-pos combinations which are listed and counted.
More generally, all tuples across the full combination of keys are counted up - no matter 
what the keys are. The format of the key specifications is detailed below.

The resulting frequency list of tuples is printed to standard output
(progress messages go to standard error) as a tab-delimited table (see OUTPUT FORMAT
below).

When invoking B<cwb-scan-corpus>, command-line B<options> must be specified before the I<corpus> name; B<key specifications>
must come after it. The corpus name is compulsory, and must be given in the ALL-UPPERCASE version. 

B<cwb-scan-corpus> will look for the specified corpus in the registry directory, as usual. If a registry
location is not specified with the B<-r> option, then either a directory specified by the CORPUS_REGISTRY
environment variable, or CWB's built-in default registry will be used.



=head1 OPTIONS

Please note that the CWB utilities do not currently support GNU-style C<--long-options>.

=over 4

=item B<-b> I<num>

In order to collect frequency counts in the scanning process, a hash table with a particular number of buckets is used.
Each bucket can hold a single tuple of key values.  If there are more different types (i.e. key value combinations) than buckets, they have to be stored in overflow chains, reducing the computational efficiency of the hashing algorithm.

This option allows the number of buckets to be set by the user, in order to improve the speed of the corpus scan for
frequency counts involving a very large number of types.  Users who are not already familiar with hash tables
do not need to understand this option.  By default, B<cwb-scan-corpus> will dynamically adjust the hash table size
while scanning the corpus.

=item B<-C>        

Enables cleanup of the output data. "Cleanup" means that any token values that are not "regular" words will be omitted.
A regular word consists only of one or more hyphen-connected components, each of which is made up of either all  
letters or all digits, and does not start or end with a hyphen.

Cleanup does not apply to the values of "constraint" keys.  All other keys will be affected, however, as C<-C> is a global option.

=item B<-e> I<end>

Specifies the end point for scanning; this is inclusive, so: if all specified
keys are at position 0, the last token to be scanned will be corpus position I<end>;
if all keys are at positions 0 or 1, the last token to be scanned will be corpus
position I<end> minus 1; if all keys are at positions 0, 1 or 2, the last token to
be scanned will be corpus position I<end> minus 2; and so on.

=item B<-f> I<n>

Sets a frequency lower bound. Only tuples with frequency greater than or equal to I<n>
will be included in the output table.

=item B<-F> I<attribute>  

Adds up frequency values from p-attribute I<attribute> instead of considering each instance of a value combination
found in the corpus as a single occurrence.  The specified p-attribute must contain only strings representing numbers,
where the number for a given token represents the joint frequency of the corresponding tuple of key values.

This option is intended for use with large frequency tables stored as a CWB corpus, e.g. in the BNCweb interface.  Certain
types of aggregate counts are much faster with this implementation than an indexed MySQL database table.

=item B<-h>

Displays B<cwb-scan-corpus>'s help message, with short information about the usage of the command line options.  
This usage message will be also shown if B<cwb-scan-corpus> is called with invalid options.
After the usage message is printed, B<cwb-scan-corpus> will exit.

=item B<-o> I<file> 

Writes the tuple frequency table to I<file>, instead of to standard output, which is the
default.

The output file will be compressed using B<gzip> if I<file> ends in C<.gz>.

=item B<-q>

Activates quiet mode - the progress information normally printed to standard error is suppressed.

=item B<-r> I<registry_dir>

Specifies that the registry directory should be I<registry_dir> on startup,
instead of the standard registry. If this option is not specified, then a directory 
specified by the CORPUS_REGISTRY environment variable will be used; if that is not available, 
the built-in CWB default will be used.

=item B<-R> I<file> 

Specifies that a list of corpus ranges to scan should be read in from from I<file>. I<file>
can be C<->, in which case ranges will be read from standard input. Ranges are expected to
be listed one per line, in the form of a start position, followed by whitespace, followed by
an end position.

Note that it does not make sense to combine this option with B<-s> and B<-e>, so if B<-R> is present,
it overrules both these.

=item B<-s> I<start>

Specifies a start point for scanning. The first token to be treated as a "zero"
position in the key specification will be the token at corpus position I<start>.

=back


=head1 KEY SPECIFIERS

Each key specifier takes the form

    [?]<att>[+<n>][=/<regex>/[cd]]

or

    [?]<att>[+<n>][!=/<regex>/[cd]]

where:

=over 4

=item *

I<att> is a positional or structural attribute. 

Note that only s-attributes that have annotations can
be scanned (as it is the annotations themselves that are used as part of the resulting tuples).

The value of a p-attribute at a particular key position is the string value of that attribute
at the corresponding corpus position; the value of an s-attribute at a particular key position
is the value of the annotation of the s-attribute region that contains the corresponding corpus position - this
is an empty string for any corpus positions I<not> within a region of that s-attribute.

=item *

I<n> is an optional non-negative offset specifying the position of this key relative
to the token currently being scanned (number of tokens to the right). If scanning has reached
corpus position 20, then any keys specified with +1 will take their values from the token at
corpus position 21, any specified with +2 will take their values from the token at corpus
position 22, and so on.

=item *

I<regex> is an optional regular expression against which the key is matched; 
instances where the value of I<att> does not match I<regex> are discarded before counting.
If the C<!=> operator is used, instances will be discarded if I<regex> matches.

Regular expressions use PCRE syntax. If the corpus is encoded in UTF-8, Unicode character
classes can be used. Like all CWB regular expressions, these are matched against entire
attribute strings - that is, the regex has implict start-of-string and end-of-string
anchors.

The regex may be followed by C<c> (ignore case) and/or C<d> (ignore diacritics),
these flags being equivalent to the C<%c> and C<%d> flags in CQP, respectively.

=item *

The optional C<?> sign marks a "constraint" key which will not be included 
in the resulting frequency distribution. That is, the constraint key determines
whether or not a particular tuple will be counted, but does not itself form
part of the tuple, and is not printed in the output. 

For example, the required tuple might be C<word word+1>, but if only bigrams
beginning with a noun are required, C<?pos=/N.*/> could be added to enforce this
restriction without the POS tags themselves (NP1, NN1, or whatever else)
becoming part of the tuple.

A "bare" constraint key on an s-attribute (without a regular expression condition)
restricts the scan to regions of the selected s-attribute, e.g. C<?heading+2> in order to 
ensure that the token at offset +2 is within a heading.  Bare constraints on p-attributes
don't make any sense, of course.

=back



=head1 OUTPUT FORMAT

A TAB-delimited table with the following fields:

=over 4

=item B<frequency>

frequency count for this key combination

=item B<value of key 1>

value of first key (usually specified by I<key1>, unless it is a "constraint" key)

=item B<value of key 2>

value of second key (usually specified by I<key2>, unless there are "constraint" keys)

=item B<... value of key I<n>>

... and so on for as many keys as you have specified, and always skipping constraint keys.

=back


=head1 ENVIRONMENT

=over 4

=item B<CORPUS_REGISTRY>

If set, this environment variable specifies the location of the corpus registry directory. 
The CORPUS_REGISTRY is overruled by the B<-r> option, if present; if neither of these means
of specifying the registry is used, then the built-in CWB default registry location will be used.

=back


=head1 SEE ALSO

L<cqp>, L<cwb-describe-corpus>, L<cwb-decode>, L<cwb-lexdecode>, L<cwb-s-decode>, L<cwb-align-decode>, L<cwb-decode-nqrfile>.


=head1 COPYRIGHT

B<IMS Open Corpus Workbench (CWB)> L<http://cwb.sourceforge.net/>

Copyright (C) 1993-2006 by IMS, University of Stuttgart

Copyright (C) 2007- by the respective contributers (see file F<AUTHORS>)

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details
(in the file F<COPYING>, or available via WWW at
L<http://www.gnu.org/copyleft/gpl.html>).

=cut

