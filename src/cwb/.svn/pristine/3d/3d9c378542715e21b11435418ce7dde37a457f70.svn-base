<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>CWB: cl/storage.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">CWB</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_b7d1217a2552bcc660f8266e8d836e86.html">cl</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>storage.h File Reference</h1>  </div>
</div>
<div class="contents">
<div class="textblock"><code>#include &lt;sys/types.h&gt;</code><br/>
<code>#include &quot;<a class="el" href="globals_8h.html">globals.h</a>&quot;</code><br/>
</div><h2><a name="nested-classes"></a>
Data Structures</h2>
<ul>
<li>struct <a class="el" href="struct_t_mblob.html">TMblob</a>
<dl class="el"><dd class="mdescRight">The MemBlob object.  <a href="struct_t_mblob.html#_details">More...</a><br/></dl></ul>
<h2><a name="define-members"></a>
Defines</h2>
<ul>
<li>#define <a class="el" href="storage_8h.html#a109e0c82e06d546fecf0948e2643966e">UNALLOCATED</a>&#160;&#160;&#160;0
<li>#define <a class="el" href="storage_8h.html#a936529f6dfde2cd2c61c66179ea2e886">MMAPPED</a>&#160;&#160;&#160;1
<dl class="el"><dd class="mdescRight">Flag: use <a class="el" href="windows-mmap_8c.html#a82479258b602d6a67258b64f7f67b541" title="Substitute POSIX mmap() for use in Windows.">mmap()</a> to allocate memory.  <a href="#a936529f6dfde2cd2c61c66179ea2e886"></a><br/></dl><li>#define <a class="el" href="storage_8h.html#a3d77ecaa188da35830eaf6083156ac26">MALLOCED</a>&#160;&#160;&#160;2
<dl class="el"><dd class="mdescRight">Flag: use malloc() to allocate memory.  <a href="#a3d77ecaa188da35830eaf6083156ac26"></a><br/></dl><li>#define <a class="el" href="storage_8h.html#ad9d4db533e1336118938ba7e0d1af6de">PAGED</a>&#160;&#160;&#160;3
<li>#define <a class="el" href="storage_8h.html#ae4bd4dcc79eefdf41258b6ddf09133f3">SIZE_BIT</a>&#160;&#160;&#160;0
<li>#define <a class="el" href="storage_8h.html#ab51e982ba3dd0fcb3f2f5c4f1006197b">SIZE_BYTE</a>&#160;&#160;&#160;sizeof(char)
<li>#define <a class="el" href="storage_8h.html#a066a3b014ffc208a512409bf80769cdf">SIZE_SHINT</a>&#160;&#160;&#160;sizeof(short)
<li>#define <a class="el" href="storage_8h.html#a6e9340affe2ce06ae958bd5ce9c7fd4d">SIZE_INT</a>&#160;&#160;&#160;sizeof(int)
<li>#define <a class="el" href="storage_8h.html#a76a471cb2379e8aacbebb76b00934708">SIZE_LONG</a>&#160;&#160;&#160;sizeof(long)
<li>#define <a class="el" href="storage_8h.html#ac5edcf3ce9512fa7487016cbc6900fe3">memblob_read_from_file</a>&#160;&#160;&#160;read_file_into_blob
<li>#define <a class="el" href="storage_8h.html#a77365af4c6044a626cffe9066d005e1f">memblob_write_to_file</a>&#160;&#160;&#160;write_file_from_blob
<li>#define <a class="el" href="storage_8h.html#ab0fe04a887ba139f1bc541b3ac77241a">memblob_free</a>&#160;&#160;&#160;mfree
<li>#define <a class="el" href="storage_8h.html#ab5d59f9d268062e91068b6d72884025d">memblob_clear</a>&#160;&#160;&#160;init_mblob
<li>#define <a class="el" href="storage_8h.html#abb69efb1168b299a72ff12258888723b">memblob_allocate</a>&#160;&#160;&#160;alloc_mblob
</ul>
<h2><a name="typedef-members"></a>
Typedefs</h2>
<ul>
<li>typedef struct <a class="el" href="struct_t_mblob.html">TMblob</a> <a class="el" href="storage_8h.html#a9171e4d729bee003eb1e846f2182889a">MemBlob</a>
<dl class="el"><dd class="mdescRight">The MemBlob object.  <a href="#a9171e4d729bee003eb1e846f2182889a"></a><br/></dl></ul>
<h2><a name="func-members"></a>
Functions</h2>
<ul>
<li>void <a class="el" href="storage_8h.html#a8b3939b07c9383d22e90973183f655ef">NwriteInt</a> (int val, FILE *fd)
<dl class="el"><dd class="mdescRight">Writes an integer to file, converting to network byte order.  <a href="#a8b3939b07c9383d22e90973183f655ef"></a><br/></dl><li>void <a class="el" href="storage_8h.html#a11a571a2e287661539d648ba088c6dca">NreadInt</a> (int *val, FILE *fd)
<dl class="el"><dd class="mdescRight">Reads an integer from file, converting from network byte order.  <a href="#a11a571a2e287661539d648ba088c6dca"></a><br/></dl><li>void <a class="el" href="storage_8h.html#a7cc3100c6cd4e193dafb9d26dd295894">NwriteInts</a> (int *vals, int nr_vals, FILE *fd)
<dl class="el"><dd class="mdescRight">Writes an array of integers to file, converting to network byte order.  <a href="#a7cc3100c6cd4e193dafb9d26dd295894"></a><br/></dl><li>void <a class="el" href="storage_8h.html#a4b732e45200867dc9fd9713586423eed">NreadInts</a> (int *vals, int nr_vals, FILE *fd)
<dl class="el"><dd class="mdescRight">Reads an array of integers from file, converting from network byte order.  <a href="#a4b732e45200867dc9fd9713586423eed"></a><br/></dl><li>void <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree</a> (<a class="el" href="struct_t_mblob.html">MemBlob</a> *blob)
<dl class="el"><dd class="mdescRight">Frees the memory used by a MemBlob.  <a href="#a0d3b251b78d2332acd80b689d5c34f9c"></a><br/></dl><li>void <a class="el" href="storage_8h.html#abd08ed2afff7e65784899692560e52ff">init_mblob</a> (<a class="el" href="struct_t_mblob.html">MemBlob</a> *blob)
<dl class="el"><dd class="mdescRight">Clears all fields in a MemBlob, regardless of their usage, and puts the blob back to its virginal state.  <a href="#abd08ed2afff7e65784899692560e52ff"></a><br/></dl><li>int <a class="el" href="storage_8h.html#a2c4c793bee0dd47e6f5fb822ba3beb09">alloc_mblob</a> (<a class="el" href="struct_t_mblob.html">MemBlob</a> *blob, int nr_items, int item_size, int clear_blob)
<dl class="el"><dd class="mdescRight">Allocates memory for a blob of the requested size.  <a href="#a2c4c793bee0dd47e6f5fb822ba3beb09"></a><br/></dl><li>int <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob</a> (char *filename, int allocation_method, int item_size, <a class="el" href="struct_t_mblob.html">MemBlob</a> *blob)
<dl class="el"><dd class="mdescRight">Reads the contents of a file into memory represented by blob.  <a href="#acf00578b9d6a59479d67d5f9af4a3bc1"></a><br/></dl><li>int <a class="el" href="storage_8h.html#a219f66e99db0e44c297ac22be8a4e44e">write_file_from_blob</a> (char *filename, <a class="el" href="struct_t_mblob.html">MemBlob</a> *blob, int convert_to_nbo)
<dl class="el"><dd class="mdescRight">Writes the data stored in a blob to file.  <a href="#a219f66e99db0e44c297ac22be8a4e44e"></a><br/></dl><li><a class="el" href="windows-mmap_8h.html#a947150611d74d1400ef3f0af0776aadd">caddr_t</a> <a class="el" href="storage_8h.html#abb67e02392a8adfbb6c9459cfa1456b5">mmapfile</a> (char *filename, size_t *len_ptr, char *<a class="el" href="cwb-decode_8c.html#a0e683ae66015f10f972d6938197dbc5e">mode</a>)
<dl class="el"><dd class="mdescRight">Maps a file into memory in either read or write mode.  <a href="#abb67e02392a8adfbb6c9459cfa1456b5"></a><br/></dl><li><a class="el" href="windows-mmap_8h.html#a947150611d74d1400ef3f0af0776aadd">caddr_t</a> <a class="el" href="storage_8h.html#addba8fd8fb04e0f369de95d5b01f7bae">mallocfile</a> (char *filename, size_t *len_ptr, char *<a class="el" href="cwb-decode_8c.html#a0e683ae66015f10f972d6938197dbc5e">mode</a>)
<dl class="el"><dd class="mdescRight">Maps a file into memory.  <a href="#addba8fd8fb04e0f369de95d5b01f7bae"></a><br/></dl></ul>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="a3d77ecaa188da35830eaf6083156ac26"></a><!-- doxytag: member="storage.h::MALLOCED" ref="a3d77ecaa188da35830eaf6083156ac26" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MALLOCED&#160;&#160;&#160;2</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Flag: use malloc() to allocate memory. </p>

<p>Referenced by <a class="el" href="storage_8h.html#a2c4c793bee0dd47e6f5fb822ba3beb09">alloc_mblob()</a>, <a class="el" href="makecomps_8h.html#af6042386945a37314f8bb7a7baebea6c">creat_freqs()</a>, <a class="el" href="makecomps_8h.html#a16dff38182e22b8bd7b37bc5dc13dfe4">creat_rev_corpus_idx()</a>, <a class="el" href="makecomps_8h.html#a355b64f84ad632120061196d646d53fa">creat_sort_lexicon()</a>, <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree()</a>, <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>, and <a class="el" href="storage_8h.html#a219f66e99db0e44c297ac22be8a4e44e">write_file_from_blob()</a>.</p>

</div>
</div>
<a class="anchor" id="abb69efb1168b299a72ff12258888723b"></a><!-- doxytag: member="storage.h::memblob_allocate" ref="abb69efb1168b299a72ff12258888723b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define memblob_allocate&#160;&#160;&#160;alloc_mblob</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab5d59f9d268062e91068b6d72884025d"></a><!-- doxytag: member="storage.h::memblob_clear" ref="ab5d59f9d268062e91068b6d72884025d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define memblob_clear&#160;&#160;&#160;init_mblob</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ab0fe04a887ba139f1bc541b3ac77241a"></a><!-- doxytag: member="storage.h::memblob_free" ref="ab0fe04a887ba139f1bc541b3ac77241a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define memblob_free&#160;&#160;&#160;mfree</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ac5edcf3ce9512fa7487016cbc6900fe3"></a><!-- doxytag: member="storage.h::memblob_read_from_file" ref="ac5edcf3ce9512fa7487016cbc6900fe3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define memblob_read_from_file&#160;&#160;&#160;read_file_into_blob</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a77365af4c6044a626cffe9066d005e1f"></a><!-- doxytag: member="storage.h::memblob_write_to_file" ref="a77365af4c6044a626cffe9066d005e1f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define memblob_write_to_file&#160;&#160;&#160;write_file_from_blob</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a936529f6dfde2cd2c61c66179ea2e886"></a><!-- doxytag: member="storage.h::MMAPPED" ref="a936529f6dfde2cd2c61c66179ea2e886" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MMAPPED&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Flag: use <a class="el" href="windows-mmap_8c.html#a82479258b602d6a67258b64f7f67b541" title="Substitute POSIX mmap() for use in Windows.">mmap()</a> to allocate memory. </p>

<p>Referenced by <a class="el" href="attributes_8h.html#aa8cca29b27b82feca31150e6f77a5fcd">load_component()</a>, <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree()</a>, <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>, and <a class="el" href="storage_8h.html#a219f66e99db0e44c297ac22be8a4e44e">write_file_from_blob()</a>.</p>

</div>
</div>
<a class="anchor" id="ad9d4db533e1336118938ba7e0d1af6de"></a><!-- doxytag: member="storage.h::PAGED" ref="ad9d4db533e1336118938ba7e0d1af6de" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PAGED&#160;&#160;&#160;3</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree()</a>.</p>

</div>
</div>
<a class="anchor" id="ae4bd4dcc79eefdf41258b6ddf09133f3"></a><!-- doxytag: member="storage.h::SIZE_BIT" ref="ae4bd4dcc79eefdf41258b6ddf09133f3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIZE_BIT&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="storage_8h.html#a2c4c793bee0dd47e6f5fb822ba3beb09">alloc_mblob()</a>, and <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>.</p>

</div>
</div>
<a class="anchor" id="ab51e982ba3dd0fcb3f2f5c4f1006197b"></a><!-- doxytag: member="storage.h::SIZE_BYTE" ref="ab51e982ba3dd0fcb3f2f5c4f1006197b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIZE_BYTE&#160;&#160;&#160;sizeof(char)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a6e9340affe2ce06ae958bd5ce9c7fd4d"></a><!-- doxytag: member="storage.h::SIZE_INT" ref="a6e9340affe2ce06ae958bd5ce9c7fd4d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIZE_INT&#160;&#160;&#160;sizeof(int)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="makecomps_8h.html#a16dff38182e22b8bd7b37bc5dc13dfe4">creat_rev_corpus_idx()</a>.</p>

</div>
</div>
<a class="anchor" id="a76a471cb2379e8aacbebb76b00934708"></a><!-- doxytag: member="storage.h::SIZE_LONG" ref="a76a471cb2379e8aacbebb76b00934708" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIZE_LONG&#160;&#160;&#160;sizeof(long)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a066a3b014ffc208a512409bf80769cdf"></a><!-- doxytag: member="storage.h::SIZE_SHINT" ref="a066a3b014ffc208a512409bf80769cdf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define SIZE_SHINT&#160;&#160;&#160;sizeof(short)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a109e0c82e06d546fecf0948e2643966e"></a><!-- doxytag: member="storage.h::UNALLOCATED" ref="a109e0c82e06d546fecf0948e2643966e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UNALLOCATED&#160;&#160;&#160;0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="storage_8h.html#abd08ed2afff7e65784899692560e52ff">init_mblob()</a>, <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree()</a>, <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>, and <a class="el" href="storage_8h.html#a219f66e99db0e44c297ac22be8a4e44e">write_file_from_blob()</a>.</p>

</div>
</div>
<hr/><h2>Typedef Documentation</h2>
<a class="anchor" id="a9171e4d729bee003eb1e846f2182889a"></a><!-- doxytag: member="storage.h::MemBlob" ref="a9171e4d729bee003eb1e846f2182889a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct <a class="el" href="struct_t_mblob.html">TMblob</a>  <a class="el" href="struct_t_mblob.html">MemBlob</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The MemBlob object. </p>
<p>This object, unsurprisingly, represents a blob of memory. </p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a2c4c793bee0dd47e6f5fb822ba3beb09"></a><!-- doxytag: member="storage.h::alloc_mblob" ref="a2c4c793bee0dd47e6f5fb822ba3beb09" args="(MemBlob *blob, int nr_items, int item_size, int clear_blob)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int alloc_mblob </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_t_mblob.html">MemBlob</a> *&#160;</td>
          <td class="paramname"><em>blob</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nr_items</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>item_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>clear_blob</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Allocates memory for a blob of the requested size. </p>
<p>A block of memory holding nr_items of size item_size is created in the specified MemBlob.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">blob</td><td>The MemBlob in which to place the memory. </td></tr>
    <tr><td class="paramname">nr_items</td><td>The number of items the MemBlob is to hold as data. </td></tr>
    <tr><td class="paramname">item_size</td><td>The size of one item. </td></tr>
    <tr><td class="paramname">clear_blob</td><td>boolean: if true, all bytes in the data space will be initialised to 0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>boolean: true 1 if OK, false on error </dd></dl>

<p>References <a class="el" href="struct_t_mblob.html#a28d16dd145de3866e4a568a677a792bc">TMblob::allocation_method</a>, <a class="el" href="struct_t_mblob.html#aaece488ae3f9f67f9991b0c90fd12369">TMblob::changed</a>, <a class="el" href="cl_8h.html#a5b756594ae431fd5ec0ffbdc77db1e64">cl_calloc()</a>, <a class="el" href="cl_8h.html#a4e4eccd789155123ab533ed0cecbecea">cl_malloc()</a>, <a class="el" href="struct_t_mblob.html#ac103627c1ad15cbec2f22d0abe6d54b6">TMblob::data</a>, <a class="el" href="struct_t_mblob.html#ae96bbe3347b319ee7bdbd1f2e2ba9f5b">TMblob::fname</a>, <a class="el" href="struct_t_mblob.html#a0df6c6444a7221a507d4d1aa6e501df2">TMblob::fsize</a>, <a class="el" href="struct_t_mblob.html#ab8f5dcd7fe4b5fe9926cd865f13e726a">TMblob::item_size</a>, <a class="el" href="storage_8h.html#a3d77ecaa188da35830eaf6083156ac26">MALLOCED</a>, <a class="el" href="struct_t_mblob.html#a8f132feee9de66d32fafd0c5921879d4">TMblob::nr_items</a>, <a class="el" href="struct_t_mblob.html#ad5f0842c40c7e46344fd8df70187fa0f">TMblob::offset</a>, <a class="el" href="struct_t_mblob.html#a854352f53b148adc24983a58a1866d66">TMblob::size</a>, <a class="el" href="storage_8h.html#ae4bd4dcc79eefdf41258b6ddf09133f3">SIZE_BIT</a>, and <a class="el" href="struct_t_mblob.html#a6628e52a23f7d43175e90b02c7574d21">TMblob::writeable</a>.</p>

</div>
</div>
<a class="anchor" id="abd08ed2afff7e65784899692560e52ff"></a><!-- doxytag: member="storage.h::init_mblob" ref="abd08ed2afff7e65784899692560e52ff" args="(MemBlob *blob)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init_mblob </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_t_mblob.html">MemBlob</a> *&#160;</td>
          <td class="paramname"><em>blob</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clears all fields in a MemBlob, regardless of their usage, and puts the blob back to its virginal state. </p>
<p>Note that it doesn't free blob-&gt;data - just sets it to NULL. </p>

<p>References <a class="el" href="struct_t_mblob.html#a28d16dd145de3866e4a568a677a792bc">TMblob::allocation_method</a>, <a class="el" href="struct_t_mblob.html#aaece488ae3f9f67f9991b0c90fd12369">TMblob::changed</a>, <a class="el" href="struct_t_mblob.html#ac103627c1ad15cbec2f22d0abe6d54b6">TMblob::data</a>, <a class="el" href="struct_t_mblob.html#ae96bbe3347b319ee7bdbd1f2e2ba9f5b">TMblob::fname</a>, <a class="el" href="struct_t_mblob.html#a0df6c6444a7221a507d4d1aa6e501df2">TMblob::fsize</a>, <a class="el" href="struct_t_mblob.html#ab8f5dcd7fe4b5fe9926cd865f13e726a">TMblob::item_size</a>, <a class="el" href="struct_t_mblob.html#a8f132feee9de66d32fafd0c5921879d4">TMblob::nr_items</a>, <a class="el" href="struct_t_mblob.html#ad5f0842c40c7e46344fd8df70187fa0f">TMblob::offset</a>, <a class="el" href="struct_t_mblob.html#a854352f53b148adc24983a58a1866d66">TMblob::size</a>, <a class="el" href="storage_8h.html#a109e0c82e06d546fecf0948e2643966e">UNALLOCATED</a>, and <a class="el" href="struct_t_mblob.html#a6628e52a23f7d43175e90b02c7574d21">TMblob::writeable</a>.</p>

<p>Referenced by <a class="el" href="attributes_8h.html#a6112b6e959cfebc27d71663b0dacc792">declare_component()</a>, and <a class="el" href="storage_8h.html#a0d3b251b78d2332acd80b689d5c34f9c">mfree()</a>.</p>

</div>
</div>
<a class="anchor" id="addba8fd8fb04e0f369de95d5b01f7bae"></a><!-- doxytag: member="storage.h::mallocfile" ref="addba8fd8fb04e0f369de95d5b01f7bae" args="(char *filename, size_t *len_ptr, char *mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="windows-mmap_8h.html#a947150611d74d1400ef3f0af0776aadd">caddr_t</a> mallocfile </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>len_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maps a file into memory. </p>
<p>This function does virtually the same as mmapfile (same parameters, same return value), but the memory is taken with malloc(3), not with mmap(2).</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="storage_8h.html#abb67e02392a8adfbb6c9459cfa1456b5" title="Maps a file into memory in either read or write mode.">mmapfile</a> </dd></dl>

<p>References <a class="el" href="cl_8h.html#a4e4eccd789155123ab533ed0cecbecea">cl_malloc()</a>, and <a class="el" href="globals_8h.html#a36fa9b2e726512bc17a7a6d3e39002be">O_BINARY</a>.</p>

<p>Referenced by <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>.</p>

</div>
</div>
<a class="anchor" id="a0d3b251b78d2332acd80b689d5c34f9c"></a><!-- doxytag: member="storage.h::mfree" ref="a0d3b251b78d2332acd80b689d5c34f9c" args="(MemBlob *blob)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void mfree </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct_t_mblob.html">MemBlob</a> *&#160;</td>
          <td class="paramname"><em>blob</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Frees the memory used by a MemBlob. </p>
<p>This works regardless of the method used to allocate the blob. </p>

<p>References <a class="el" href="struct_t_mblob.html#a28d16dd145de3866e4a568a677a792bc">TMblob::allocation_method</a>, <a class="el" href="struct_t_mblob.html#ac103627c1ad15cbec2f22d0abe6d54b6">TMblob::data</a>, <a class="el" href="struct_t_mblob.html#ae96bbe3347b319ee7bdbd1f2e2ba9f5b">TMblob::fname</a>, <a class="el" href="storage_8c.html#abd08ed2afff7e65784899692560e52ff">init_mblob()</a>, <a class="el" href="storage_8h.html#a3d77ecaa188da35830eaf6083156ac26">MALLOCED</a>, <a class="el" href="storage_8c.html#adb02dd67632057f0069fd37976d35257">MMAP_EMPTY_LEN</a>, <a class="el" href="storage_8h.html#a936529f6dfde2cd2c61c66179ea2e886">MMAPPED</a>, <a class="el" href="windows-mmap_8c.html#a559e66a4492a6cb9c6ef5cd07edb8955">munmap()</a>, <a class="el" href="storage_8h.html#ad9d4db533e1336118938ba7e0d1af6de">PAGED</a>, <a class="el" href="struct_t_mblob.html#a854352f53b148adc24983a58a1866d66">TMblob::size</a>, and <a class="el" href="storage_8h.html#a109e0c82e06d546fecf0948e2643966e">UNALLOCATED</a>.</p>

<p>Referenced by <a class="el" href="attributes_8h.html#a94c161c4abbff9e70c7598aef8d23cbd">comp_drop_component()</a>.</p>

</div>
</div>
<a class="anchor" id="abb67e02392a8adfbb6c9459cfa1456b5"></a><!-- doxytag: member="storage.h::mmapfile" ref="abb67e02392a8adfbb6c9459cfa1456b5" args="(char *filename, size_t *len_ptr, char *mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="windows-mmap_8h.html#a947150611d74d1400ef3f0af0776aadd">caddr_t</a> mmapfile </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t *&#160;</td>
          <td class="paramname"><em>len_ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mode</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Maps a file into memory in either read or write mode. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>Name of the file to map. </td></tr>
    <tr><td class="paramname">len_ptr</td><td>The number of bytes the returned pointer points to. </td></tr>
    <tr><td class="paramname">mode</td><td>Can be either "r", "w", "rb" or "wb". If mode is "r", len_ptr is taken as an input parameter (*len_ptr bytes are allocated). {NB I copied this from existing notes but surely shouldn't the comment about len_ptr apply if mode is "w" not "r"? -- AH} </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The contents of file in filename as a pointer to a memory area. </dd></dl>

<p>References <a class="el" href="windows-mmap_8h.html#a8523dcf952f6ff059a3bed717e4f1296">MAP_FAILED</a>, <a class="el" href="windows-mmap_8h.html#a57028962c2a7c0c802ca6613492f2ef3">MAP_SHARED</a>, <a class="el" href="windows-mmap_8c.html#a82479258b602d6a67258b64f7f67b541">mmap()</a>, <a class="el" href="storage_8c.html#adb02dd67632057f0069fd37976d35257">MMAP_EMPTY_LEN</a>, <a class="el" href="storage_8c.html#aaad8e28484789922774889477f999bc3">MMAPFLAGS</a>, <a class="el" href="globals_8h.html#a36fa9b2e726512bc17a7a6d3e39002be">O_BINARY</a>, <a class="el" href="windows-mmap_8h.html#a15bf68ce8b590838b3a5c0b639d8d519">PROT_READ</a>, and <a class="el" href="windows-mmap_8h.html#a2a79c8ceefb8fc25a940ae07a3d94429">PROT_WRITE</a>.</p>

<p>Referenced by <a class="el" href="storage_8h.html#acf00578b9d6a59479d67d5f9af4a3bc1">read_file_into_blob()</a>.</p>

</div>
</div>
<a class="anchor" id="a11a571a2e287661539d648ba088c6dca"></a><!-- doxytag: member="storage.h::NreadInt" ref="a11a571a2e287661539d648ba088c6dca" args="(int *val, FILE *fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NreadInt </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads an integer from file, converting from network byte order. </p>
<p>This function does all the error checking for you, and will abort the program if the int cannot be read.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>Location to put the resulting int. </td></tr>
    <tr><td class="paramname">fd</td><td>File handle to read from </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="eval_8h.html#a93fe6fe1a66a9de33bb160f0c3e18954a09c37d051e7e4b3f3a7e8e75dca15912">word</a>.</p>

<p>Referenced by <a class="el" href="cwb-huffcode_8c.html#a774e9c4cc2dd18b1e82c4db3cc464395">decode_check_huff()</a>, and <a class="el" href="cwb-huffcode_8c.html#a54819f1c7b28623c39a3231a6a23f49e">ReadHCD()</a>.</p>

</div>
</div>
<a class="anchor" id="a4b732e45200867dc9fd9713586423eed"></a><!-- doxytag: member="storage.h::NreadInts" ref="a4b732e45200867dc9fd9713586423eed" args="(int *vals, int nr_vals, FILE *fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NreadInts </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nr_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads an array of integers from file, converting from network byte order. </p>
<p>This function does all the error checking for you, and will abort the program if the requested number of ints cannot be read.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">vals</td><td>Pointer to location to put the resulting array of ints. (This memory must have been allocated by the caller.) </td></tr>
    <tr><td class="paramname">nr_vals</td><td>Number of integers to read. </td></tr>
    <tr><td class="paramname">fd</td><td>File handle to read from </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="eval_8h.html#a93fe6fe1a66a9de33bb160f0c3e18954a09c37d051e7e4b3f3a7e8e75dca15912">word</a>.</p>

<p>Referenced by <a class="el" href="cwb-huffcode_8c.html#a54819f1c7b28623c39a3231a6a23f49e">ReadHCD()</a>.</p>

</div>
</div>
<a class="anchor" id="a8b3939b07c9383d22e90973183f655ef"></a><!-- doxytag: member="storage.h::NwriteInt" ref="a8b3939b07c9383d22e90973183f655ef" args="(int val, FILE *fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NwriteInt </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Writes an integer to file, converting to network byte order. </p>
<p>Other than the byte order conversion, this is the same as fwrite(&amp;val, sizeof(int), 1, fd) .</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">val</td><td>The integer to write. </td></tr>
    <tr><td class="paramname">fd</td><td>File handle to write to. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="eval_8h.html#a93fe6fe1a66a9de33bb160f0c3e18954a09c37d051e7e4b3f3a7e8e75dca15912">word</a>.</p>

<p>Referenced by <a class="el" href="cwb-compress-rdx_8c.html#ada27dd0455655c13cd8dca8259eefbfb">compress_reversed_index()</a>, <a class="el" href="cwb-huffcode_8c.html#a80203248d1441475e98106bf8f8ea6ec">compute_code_lengths()</a>, <a class="el" href="makecomps_8h.html#ab8f0ec6caf733eae459326a9c0483608">creat_rev_corpus()</a>, <a class="el" href="cwb-encode_8c.html#adc6d582037bec1ccba6ab40a9ddbbf87">encode_add_wattr_line()</a>, <a class="el" href="cwb-align-encode_8c.html#a0ddf1224851353fc92bfbff6f499fa97">main()</a>, <a class="el" href="cwb-encode_8c.html#a7b5a2adf15771a1d43017518ed35a52d">range_close()</a>, <a class="el" href="cwb-s-encode_8c.html#aff0f32dc4c2723af6ad1905fd06a37d7">sencode_write_region()</a>, and <a class="el" href="cwb-huffcode_8c.html#acf652ab7419c1a640d1682e183733f9c">WriteHCD()</a>.</p>

</div>
</div>
<a class="anchor" id="a7cc3100c6cd4e193dafb9d26dd295894"></a><!-- doxytag: member="storage.h::NwriteInts" ref="a7cc3100c6cd4e193dafb9d26dd295894" args="(int *vals, int nr_vals, FILE *fd)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NwriteInts </td>
          <td>(</td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nr_vals</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Writes an array of integers to file, converting to network byte order. </p>
<p>Other than the byte order conversion, this is the same as fwrite(vals, sizeof(int), nr_vals, fd) .</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">vals</td><td>Pointer to the location of the block of integers to write. </td></tr>
    <tr><td class="paramname">nr_vals</td><td>Number of integers to write. </td></tr>
    <tr><td class="paramname">fd</td><td>File handle to write to. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="eval_8h.html#a93fe6fe1a66a9de33bb160f0c3e18954a09c37d051e7e4b3f3a7e8e75dca15912">word</a>.</p>

<p>Referenced by <a class="el" href="makecomps_8h.html#ab8f0ec6caf733eae459326a9c0483608">creat_rev_corpus()</a>, <a class="el" href="storage_8h.html#a219f66e99db0e44c297ac22be8a4e44e">write_file_from_blob()</a>, and <a class="el" href="cwb-huffcode_8c.html#acf652ab7419c1a640d1682e183733f9c">WriteHCD()</a>.</p>

</div>
</div>
<a class="anchor" id="acf00578b9d6a59479d67d5f9af4a3bc1"></a><!-- doxytag: member="storage.h::read_file_into_blob" ref="acf00578b9d6a59479d67d5f9af4a3bc1" args="(char *filename, int allocation_method, int item_size, MemBlob *blob)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int read_file_into_blob </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>allocation_method</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>item_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_t_mblob.html">MemBlob</a> *&#160;</td>
          <td class="paramname"><em>blob</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads the contents of a file into memory represented by blob. </p>
<p>You can choose the memory allocation method - MMAPPED is faster, but writeable areas of memory should be taken with care. MALLOCED is slower (and far more space consuming), but writing data into malloced memory is no problem.</p>
<p>In Windows, the read is always binary-mode.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file to read in. </td></tr>
    <tr><td class="paramname">allocation_method</td><td>MMAPPED or MALLOCED (see function description) </td></tr>
    <tr><td class="paramname">item_size</td><td>This is used for MemBlob access methods, it is simply copied into the MemBlob data structure. </td></tr>
    <tr><td class="paramname">blob</td><td>The MemBlob to read the file into. It must not be in use -- the fields are overwritten. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 on failure, 1 if everything went fine. </dd></dl>

<p>References <a class="el" href="struct_t_mblob.html#a28d16dd145de3866e4a568a677a792bc">TMblob::allocation_method</a>, <a class="el" href="struct_t_mblob.html#aaece488ae3f9f67f9991b0c90fd12369">TMblob::changed</a>, <a class="el" href="struct_t_mblob.html#ac103627c1ad15cbec2f22d0abe6d54b6">TMblob::data</a>, <a class="el" href="struct_t_mblob.html#ab8f5dcd7fe4b5fe9926cd865f13e726a">TMblob::item_size</a>, <a class="el" href="storage_8h.html#a3d77ecaa188da35830eaf6083156ac26">MALLOCED</a>, <a class="el" href="storage_8c.html#addba8fd8fb04e0f369de95d5b01f7bae">mallocfile()</a>, <a class="el" href="storage_8c.html#abb67e02392a8adfbb6c9459cfa1456b5">mmapfile()</a>, <a class="el" href="storage_8h.html#a936529f6dfde2cd2c61c66179ea2e886">MMAPPED</a>, <a class="el" href="struct_t_mblob.html#a8f132feee9de66d32fafd0c5921879d4">TMblob::nr_items</a>, <a class="el" href="struct_t_mblob.html#a854352f53b148adc24983a58a1866d66">TMblob::size</a>, <a class="el" href="storage_8h.html#ae4bd4dcc79eefdf41258b6ddf09133f3">SIZE_BIT</a>, <a class="el" href="storage_8h.html#a109e0c82e06d546fecf0948e2643966e">UNALLOCATED</a>, and <a class="el" href="struct_t_mblob.html#a6628e52a23f7d43175e90b02c7574d21">TMblob::writeable</a>.</p>

<p>Referenced by <a class="el" href="makecomps_8h.html#af6042386945a37314f8bb7a7baebea6c">creat_freqs()</a>, <a class="el" href="makecomps_8h.html#a355b64f84ad632120061196d646d53fa">creat_sort_lexicon()</a>, and <a class="el" href="attributes_8h.html#aa8cca29b27b82feca31150e6f77a5fcd">load_component()</a>.</p>

</div>
</div>
<a class="anchor" id="a219f66e99db0e44c297ac22be8a4e44e"></a><!-- doxytag: member="storage.h::write_file_from_blob" ref="a219f66e99db0e44c297ac22be8a4e44e" args="(char *filename, MemBlob *blob, int convert_to_nbo)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int write_file_from_blob </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="struct_t_mblob.html">MemBlob</a> *&#160;</td>
          <td class="paramname"><em>blob</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>convert_to_nbo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Writes the data stored in a blob to file. </p>
<p>In Windows, the write is always binary-mode.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">filename</td><td>The file to write to. </td></tr>
    <tr><td class="paramname">blob</td><td>The MemBlob to write to file. </td></tr>
    <tr><td class="paramname">convert_to_nbo</td><td>boolean: if true, data is converted to network byte order before it's written. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 on failure, 1 if everything went fine. </dd></dl>

<p>References <a class="el" href="struct_t_mblob.html#a28d16dd145de3866e4a568a677a792bc">TMblob::allocation_method</a>, <a class="el" href="struct_t_mblob.html#aaece488ae3f9f67f9991b0c90fd12369">TMblob::changed</a>, <a class="el" href="struct_t_mblob.html#ac103627c1ad15cbec2f22d0abe6d54b6">TMblob::data</a>, <a class="el" href="storage_8h.html#a3d77ecaa188da35830eaf6083156ac26">MALLOCED</a>, <a class="el" href="storage_8h.html#a936529f6dfde2cd2c61c66179ea2e886">MMAPPED</a>, <a class="el" href="storage_8c.html#a7cc3100c6cd4e193dafb9d26dd295894">NwriteInts()</a>, <a class="el" href="struct_t_mblob.html#a854352f53b148adc24983a58a1866d66">TMblob::size</a>, and <a class="el" href="storage_8h.html#a109e0c82e06d546fecf0948e2643966e">UNALLOCATED</a>.</p>

<p>Referenced by <a class="el" href="makecomps_8h.html#af6042386945a37314f8bb7a7baebea6c">creat_freqs()</a>, <a class="el" href="makecomps_8h.html#a16dff38182e22b8bd7b37bc5dc13dfe4">creat_rev_corpus_idx()</a>, and <a class="el" href="makecomps_8h.html#a355b64f84ad632120061196d646d53fa">creat_sort_lexicon()</a>.</p>

</div>
</div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Tue Jan 17 2012 22:07:39 for CWB by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </small></address>
</body>
</html>
