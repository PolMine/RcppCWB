<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>CWB: cl/regopt.c File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.3 -->
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">CWB</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.html"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
      <li><a href="dirs.html"><span>Directories</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>Globals</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="dir_b7d1217a2552bcc660f8266e8d836e86.html">cl</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<h1>regopt.c File Reference</h1>  </div>
</div>
<div class="contents">

<p>The CL_Regex object, and the CL Regular Expression Optimiser.  
<a href="#_details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="globals_8h.html">globals.h</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="regopt_8h.html">regopt.h</a>&quot;</code><br/>
</div><h2><a name="func-members"></a>
Functions</h2>
<ul>
<li>int <a class="el" href="regopt_8c.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse</a> (char *regex)
<dl class="el"><dd class="mdescRight">Analyses a regular expression and tries to find the best set of grains.  <a href="#ab312a681f0a8c861a08f9d26a3f4ab95"></a><br/></dl><li><a class="el" href="struct___c_l___regex.html">CL_Regex</a> <a class="el" href="regopt_8c.html#a2c4607eb8e094b7699062df8eb744058">cl_new_regex</a> (char *regex, int flags, <a class="el" href="cl_8h.html#a3502421ae8eac74673133702852dde32">CorpusCharset</a> <a class="el" href="cwb-check-input_8c.html#ab7d33183c58d7df43cc5602b9c842b37">charset</a>)
<dl class="el"><dd class="mdescRight">Create a new CL_regex object (ie a regular expression buffer).  <a href="#a2c4607eb8e094b7699062df8eb744058"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a268fbea810e17003de65334cbceafbca">cl_regex_optimised</a> (<a class="el" href="struct___c_l___regex.html">CL_Regex</a> rx)
<dl class="el"><dd class="mdescRight">Finds the level of optimisation of a CL_Regex.  <a href="#a268fbea810e17003de65334cbceafbca"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a7a9d3816260f385cf56e15839c518cee">cl_regex_match</a> (<a class="el" href="struct___c_l___regex.html">CL_Regex</a> rx, char *str)
<dl class="el"><dd class="mdescRight">Matches a regular expression against a string.  <a href="#a7a9d3816260f385cf56e15839c518cee"></a><br/></dl><li>void <a class="el" href="regopt_8c.html#ab18bf7e3faf1265c2d987ecc6ba6ab0f">cl_delete_regex</a> (<a class="el" href="struct___c_l___regex.html">CL_Regex</a> rx)
<dl class="el"><dd class="mdescRight">Deletes a CL_Regex object.  <a href="#ab18bf7e3faf1265c2d987ecc6ba6ab0f"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a9f79b3c3dcb006c8f3414cd6465ba7ec">is_safe_char</a> (unsigned char c)
<dl class="el"><dd class="mdescRight">Is the given character a 'safe' character which will only match itself in a regex?  <a href="#a9f79b3c3dcb006c8f3414cd6465ba7ec"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#a9504874fcb65abb067c81cc75a451e04">read_grain</a> (char *mark)
<dl class="el"><dd class="mdescRight">Reads in a grain from a regex - part of the CL Regex Optimiser.  <a href="#a9504874fcb65abb067c81cc75a451e04"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#a71807850073d353fd312b4dd8a0eb7b8">read_matchall</a> (char *mark)
<dl class="el"><dd class="mdescRight">Reads in a matchall (dot wildcard) or safe character - part of the CL Regex Optimiser.  <a href="#a71807850073d353fd312b4dd8a0eb7b8"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#a696aa9aca45c0c42b9b1501ca08f39cd">read_kleene</a> (char *mark)
<dl class="el"><dd class="mdescRight">Reads in a repetition marker - part of the CL Regex Optimiser.  <a href="#a696aa9aca45c0c42b9b1501ca08f39cd"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#a237d16bb69251631763e7e7853c5a662">read_wildcard</a> (char *mark)
<dl class="el"><dd class="mdescRight">Reads in a wildcard - part of the CL Regex Optimiser.  <a href="#a237d16bb69251631763e7e7853c5a662"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction</a> (char *mark, int *align_start, int *align_end)
<dl class="el"><dd class="mdescRight">Finds grains in a disjunction group - part of the CL Regex Optimiser.  <a href="#a4ebe3946882f5e63b53e059341d0b065"></a><br/></dl><li>void <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer</a> (int front_aligned, int anchored)
<dl class="el"><dd class="mdescRight">Updates the public grain buffer -- part of the CL Regex Optimiser.  <a href="#a397a8686e22c556c60ed1eaec5da19da"></a><br/></dl><li>void <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table</a> (void)
<dl class="el"><dd class="mdescRight">Computes a jump table for Boyer-Moore searches.  <a href="#a1b1785e702fe108639b79a3fbf6ed84f"></a><br/></dl><li>void <a class="el" href="regopt_8c.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object</a> (<a class="el" href="struct___c_l___regex.html">CL_Regex</a> rx)
<dl class="el"><dd class="mdescRight">Internal regopt function: copies optimiser data from internal global variables to the member variables of argument CL_Regex object.  <a href="#a697918b2f55aa6a0fd29906a934f5836"></a><br/></dl><li>void <a class="el" href="regopt_8c.html#a5e4fbd44e2df4d0c89bc3d4633833dd1">cl_regopt_count_reset</a> (void)
<dl class="el"><dd class="mdescRight">Reset the "success counter" for optimised regexes.  <a href="#a5e4fbd44e2df4d0c89bc3d4633833dd1"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#ac579f14edd519c3f2aa4a4cb33c76fcb">cl_regopt_count_get</a> (void)
<dl class="el"><dd class="mdescRight">Get a reading from the "success counter" for optimised regexes.  <a href="#ac579f14edd519c3f2aa4a4cb33c76fcb"></a><br/></dl></ul>
<h2><a name="var-members"></a>
Variables</h2>
<ul>
<li>char * <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a> [MAX_GRAINS]
<dl class="el"><dd class="mdescRight">list of 'grains' (any matching string must contain one of these)  <a href="#a17c41125f23920984f3734380cab57c4"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a>
<dl class="el"><dd class="mdescRight">all the grains have the same length  <a href="#a65b125ab93c3082f07ff0d7635350079"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a>
<dl class="el"><dd class="mdescRight">number of grains  <a href="#ac4527918221c359efeb1d01fb10a1a93"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a44d3ff55dc4223346a2c4f9c4f4cd30f">cl_regopt_anchor_start</a>
<dl class="el"><dd class="mdescRight">Boolean: whether grains are anchored at beginning of string.  <a href="#a44d3ff55dc4223346a2c4f9c4f4cd30f"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#aeea8fcadfd245bf518d90e45c825d518">cl_regopt_anchor_end</a>
<dl class="el"><dd class="mdescRight">Boolean: whether grains are anchored at end of string.  <a href="#aeea8fcadfd245bf518d90e45c825d518"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a200be31d923ac49fe9d9ab5f9963eb77">cl_regopt_jumptable</a> [256]
<dl class="el"><dd class="mdescRight">A jump table for Boyer-Moore search algorithm; use _unsigned_ char as index;.  <a href="#a200be31d923ac49fe9d9ab5f9963eb77"></a><br/></dl><li>char * <a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098">grain_buffer</a> [MAX_GRAINS]
<dl class="el"><dd class="mdescRight">Intermediate buffer for grains.  <a href="#ae4d9d4be4e6b1ead777698efd2b39098"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a6572b918e13646e4ca08c5ce0e40ce8a">grain_buffer_grains</a> = 0
<dl class="el"><dd class="mdescRight">The number of grains currently in the intermediate buffer.  <a href="#a6572b918e13646e4ca08c5ce0e40ce8a"></a><br/></dl><li>char <a class="el" href="regopt_8c.html#a81e2cfc536f9bb84b772f3cacec75635">public_grain_data</a> [CL_MAX_LINE_LENGTH]
<dl class="el"><dd class="mdescRight">A buffer for grain strings.  <a href="#a81e2cfc536f9bb84b772f3cacec75635"></a><br/></dl><li>char <a class="el" href="regopt_8c.html#a3be657173ddc2221aa23f1eac93286c2">local_grain_data</a> [CL_MAX_LINE_LENGTH]
<dl class="el"><dd class="mdescRight">A buffer for grain strings.  <a href="#a3be657173ddc2221aa23f1eac93286c2"></a><br/></dl><li>int <a class="el" href="regopt_8c.html#a2a1fce7eeb5bcc7601316ca301810a90">cl_regopt_successes</a> = 0
<dl class="el"><dd class="mdescRight">A counter of how many times the "grain" system has allwoed us to avoid calling the regex engine.  <a href="#a2a1fce7eeb5bcc7601316ca301810a90"></a><br/></dl><li>char <a class="el" href="regopt_8c.html#a72e088023b2127e96b872cdb4b1c6424">cl_regex_error</a> [CL_MAX_LINE_LENGTH]
<dl class="el"><dd class="mdescRight">The error message from (PCRE) regex compilation are placed in this buffer if <a class="el" href="cl_8h.html#a2c4607eb8e094b7699062df8eb744058" title="Create a new CL_regex object (ie a regular expression buffer).">cl_new_regex()</a> fails.  <a href="#a72e088023b2127e96b872cdb4b1c6424"></a><br/></dl></ul>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>The CL_Regex object, and the CL Regular Expression Optimiser. </p>
<p>This is the CL front-end to POSIX regular expressions with CL semantics (most notably: CL regexes always match the entire string and NOT substrings.)</p>
<p>Note that the optimiser is handled automatically by the CL_Regex object.</p>
<p>All variables / functions containing "regopt" are internal to this module and are not exported in the CL API.</p>
<p>Optimisation is done by means of "grains". The grain array in a CL_Regex object is a list of short strings. Any string which will match the regex must contain at least one of these. Thus, the grains provide a quick way of filtering out strings that definitely WON'T match, and avoiding a time-wasting call to the POSIX regex matching function.</p>
<p>While a regex is being optimised, the grains are stored in non-exported global variables in this module. Subsequently they are transferred to members of the CL_regex object with which they are associated. The use of global variables and a fixed-size buffer for grains is partly due to historical reasons, but it does also serve to reduce memory allocation overhead. </p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="ab18bf7e3faf1265c2d987ecc6ba6ab0f"></a><!-- doxytag: member="regopt.c::cl_delete_regex" ref="ab18bf7e3faf1265c2d987ecc6ba6ab0f" args="(CL_Regex rx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cl_delete_regex </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct___c_l___regex.html">CL_Regex</a>&#160;</td>
          <td class="paramname"><em>rx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Deletes a CL_Regex object. </p>
<p>Note that we use cl_free to deallocate the internal PCRE buffers, not pcre_free, for the simple reason that pcre_free is just a function pointer that will normally contain free, and thus we miss out on the checking that cl_free provides.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rx</td><td>The CL_Regex to delete. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="cl_8h.html#a9e15a3c725711d9effd623b2f3e225be">cl_free</a>, <a class="el" href="struct___c_l___regex.html#a0a0140b9b50c4e2d2d935f0211bcae5e">_CL_Regex::extra</a>, <a class="el" href="struct___c_l___regex.html#a343da7a5241d5dd4042b632f9c39006e">_CL_Regex::grain</a>, <a class="el" href="struct___c_l___regex.html#a809c37615b266e2fdd396ac191b9a93c">_CL_Regex::grains</a>, <a class="el" href="struct___c_l___regex.html#a6e12607ff9600c7fbf261725f217ec10">_CL_Regex::haystack_buf</a>, and <a class="el" href="struct___c_l___regex.html#a133399bb3ea4f4e15df4fc72188db775">_CL_Regex::needle</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>, <a class="el" href="tree_8h.html#a5e46fd61455c86e9a9011fd5cb094fd3">free_booltree()</a>, and <a class="el" href="eval_8h.html#af29e9f19b26beddcdba87657cc915704">free_environment()</a>.</p>

</div>
</div>
<a class="anchor" id="a2c4607eb8e094b7699062df8eb744058"></a><!-- doxytag: member="regopt.c::cl_new_regex" ref="a2c4607eb8e094b7699062df8eb744058" args="(char *regex, int flags, CorpusCharset charset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="struct___c_l___regex.html">CL_Regex</a> cl_new_regex </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>regex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="cl_8h.html#a3502421ae8eac74673133702852dde32">CorpusCharset</a>&#160;</td>
          <td class="paramname"><em>charset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a new CL_regex object (ie a regular expression buffer). </p>
<p>The regular expression is preprocessed according to the flags, and anchored to the start and end of the string. (That is, ^ is added to the start, $ to the end.)</p>
<p>Then the resulting regex is compiled (using PCRE) and optimised.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">regex</td><td>String containing the regular expression </td></tr>
    <tr><td class="paramname">flags</td><td>IGNORE_CASE, or IGNORE_DIAC, or both, or 0. </td></tr>
    <tr><td class="paramname">charset</td><td>The character set of the regex. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The new CL_Regex object, or NULL in case of error. </dd></dl>

<p>References <a class="el" href="cl_8h.html#af731838e4fa831743c660972c8499a14">CDA_EBADREGEX</a>, <a class="el" href="cl_8h.html#a1fa2e2ab47bd2c689b68a78bdac22028">CDA_OK</a>, <a class="el" href="cwb-check-input_8c.html#ab7d33183c58d7df43cc5602b9c842b37">charset</a>, <a class="el" href="struct___c_l___regex.html#ab7d33183c58d7df43cc5602b9c842b37">_CL_Regex::charset</a>, <a class="el" href="globals_8c.html#a5c4290325b240eac5fe1542a8743286a">cl_debug</a>, <a class="el" href="cdaccess_8c.html#af97f2ad4a69c7d0105f9cee4a51b29b8">cl_errno</a>, <a class="el" href="cl_8h.html#a9e15a3c725711d9effd623b2f3e225be">cl_free</a>, <a class="el" href="cl_8h.html#a4e4eccd789155123ab533ed0cecbecea">cl_malloc()</a>, <a class="el" href="cl_8h.html#ad68dfe0ca2fbad5052e8213a06f5b4ba">CL_MAX_LINE_LENGTH</a>, <a class="el" href="cl_8h.html#aff1d819a01c0ea804f724a85e14dc29e">cl_regex_error</a>, <a class="el" href="regopt_8c.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="cl_8h.html#a708281d7f482a1999c70df6c353d66e1">cl_string_canonical()</a>, <a class="el" href="cl_8h.html#a8e3a6183c822cb47f163cc14d114f0d5">cl_string_latex2iso()</a>, <a class="el" href="struct___c_l___regex.html#a0a0140b9b50c4e2d2d935f0211bcae5e">_CL_Regex::extra</a>, <a class="el" href="struct___c_l___regex.html#ac8bf36fe0577cba66bccda3a6f7e80a4">_CL_Regex::flags</a>, <a class="el" href="struct___c_l___regex.html#a809c37615b266e2fdd396ac191b9a93c">_CL_Regex::grains</a>, <a class="el" href="struct___c_l___regex.html#a6e12607ff9600c7fbf261725f217ec10">_CL_Regex::haystack_buf</a>, <a class="el" href="cl_8h.html#a1f397c74f7f8ba3952858c70eb19d082">IGNORE_CASE</a>, <a class="el" href="cl_8h.html#a2e9f85ae8ad88191c60cf4269b9ab296">IGNORE_DIAC</a>, <a class="el" href="struct___c_l___regex.html#a133399bb3ea4f4e15df4fc72188db775">_CL_Regex::needle</a>, <a class="el" href="regopt_8c.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="cl_8h.html#aa018eeb7e5a4bb1586a3f4337011daeaa3946b00fe1f38206339d69285cda6b03">utf8</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>, <a class="el" href="parse__actions_8h.html#a6cc225469d64fbddecf2d9dce7e0a28d">do_flagged_string()</a>, <a class="el" href="parse__actions_8h.html#a4335ddbb14865c031041a194e182ed92">do_XMLTag()</a>, <a class="el" href="cwb-scan-corpus_8c.html#a0ddf1224851353fc92bfbff6f499fa97">main()</a>, and <a class="el" href="cwb-scan-corpus_8c.html#a8947ac051b910a311d2d1f0ef28272bd">scancorpus_add_key()</a>.</p>

</div>
</div>
<a class="anchor" id="a7a9d3816260f385cf56e15839c518cee"></a><!-- doxytag: member="regopt.c::cl_regex_match" ref="a7a9d3816260f385cf56e15839c518cee" args="(CL_Regex rx, char *str)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cl_regex_match </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct___c_l___regex.html">CL_Regex</a>&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Matches a regular expression against a string. </p>
<p>The regular expression contained in the CL_Regex is compared to the string. No settings or flags are passed to this function; rather, the settings that rx was created with are used.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rx</td><td>The regular expression to match. </td></tr>
    <tr><td class="paramname">str</td><td>The string to compare the regex to. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Boolean: true if the regex matched, otherwise false. </dd></dl>

<p>References <a class="el" href="struct___c_l___regex.html#a93e5ad5e0410fdbd7c65a09793a14cb6">_CL_Regex::anchor_end</a>, <a class="el" href="struct___c_l___regex.html#a4e3ccc6f2ec66b18f80763c9101dc2a7">_CL_Regex::anchor_start</a>, <a class="el" href="struct___c_l___regex.html#ab7d33183c58d7df43cc5602b9c842b37">_CL_Regex::charset</a>, <a class="el" href="globals_8c.html#a5c4290325b240eac5fe1542a8743286a">cl_debug</a>, <a class="el" href="regopt_8c.html#a2a1fce7eeb5bcc7601316ca301810a90">cl_regopt_successes</a>, <a class="el" href="cl_8h.html#a708281d7f482a1999c70df6c353d66e1">cl_string_canonical()</a>, <a class="el" href="struct___c_l___regex.html#a0a0140b9b50c4e2d2d935f0211bcae5e">_CL_Regex::extra</a>, <a class="el" href="struct___c_l___regex.html#ac8bf36fe0577cba66bccda3a6f7e80a4">_CL_Regex::flags</a>, <a class="el" href="struct___c_l___regex.html#a343da7a5241d5dd4042b632f9c39006e">_CL_Regex::grain</a>, <a class="el" href="struct___c_l___regex.html#a6f097fa6018c5b24ea16507555185feb">_CL_Regex::grain_len</a>, <a class="el" href="struct___c_l___regex.html#a809c37615b266e2fdd396ac191b9a93c">_CL_Regex::grains</a>, <a class="el" href="struct___c_l___regex.html#a6e12607ff9600c7fbf261725f217ec10">_CL_Regex::haystack_buf</a>, <a class="el" href="struct___c_l___regex.html#a9da424d392549ca48c495ad456441139">_CL_Regex::jumptable</a>, and <a class="el" href="struct___c_l___regex.html#a133399bb3ea4f4e15df4fc72188db775">_CL_Regex::needle</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>, <a class="el" href="eval_8h.html#a1c6b9087d4b9c61e2be81a7a68e174cc">eval_bool()</a>, <a class="el" href="eval_8c.html#aaf8dd0672a1325480955ab8397b1928b">eval_constraint()</a>, <a class="el" href="cwb-scan-corpus_8c.html#ad40d04a47016bc8bc1aa8cbd182cdd69">is_regular()</a>, <a class="el" href="cwb-scan-corpus_8c.html#a0ddf1224851353fc92bfbff6f499fa97">main()</a>, and <a class="el" href="eval_8c.html#abcf01813cbf1161269761c3d6a2dc239">matchfirstpattern()</a>.</p>

</div>
</div>
<a class="anchor" id="a268fbea810e17003de65334cbceafbca"></a><!-- doxytag: member="regopt.c::cl_regex_optimised" ref="a268fbea810e17003de65334cbceafbca" args="(CL_Regex rx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cl_regex_optimised </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct___c_l___regex.html">CL_Regex</a>&#160;</td>
          <td class="paramname"><em>rx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Finds the level of optimisation of a CL_Regex. </p>
<p>This function returns the approximate level of optimisation, computed from the ratio of grain length to number of grains (0 = no grains, ergo not optimised at all).</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rx</td><td>The CL_Regex to check. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 if rx is not optimised; otherwise an integer indicating optimisation level. </dd></dl>

<p>References <a class="el" href="struct___c_l___regex.html#a6f097fa6018c5b24ea16507555185feb">_CL_Regex::grain_len</a>, and <a class="el" href="struct___c_l___regex.html#a809c37615b266e2fdd396ac191b9a93c">_CL_Regex::grains</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>.</p>

</div>
</div>
<a class="anchor" id="ab312a681f0a8c861a08f9d26a3f4ab95"></a><!-- doxytag: member="regopt.c::cl_regopt_analyse" ref="ab312a681f0a8c861a08f9d26a3f4ab95" args="(char *regex)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cl_regopt_analyse </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>regex</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Analyses a regular expression and tries to find the best set of grains. </p>
<p>Part of the regex optimiser. For a given regular expression, this function will try to extract a set of grains from regular expression {regex_string}. These grains are then used by the CL regex matcher and <a class="el" href="cdaccess_8c.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea" title="Gets a list of the ids of those items on a given Attribute that match a particular regular-expression...">cl_regex2id()</a> for faster regular expression search.</p>
<p>If successful, this function returns True and stores the grains in the optiomiser's global variables above (from which they should be copied to a CL_Regex object's corresponding members).</p>
<p>Usage: optimised = cl_regopt_analyse(regex_string);</p>
<p>This is a non-exported function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">regex</td><td>String containing the regex to optimise. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Boolean: true = ok, false = couldn't optimise regex. </dd></dl>

<p>References <a class="el" href="cwb-itoa_8c.html#ac1ed595d526b1beccae8e324475d61ea">buf</a>, <a class="el" href="globals_8c.html#a5c4290325b240eac5fe1542a8743286a">cl_debug</a>, <a class="el" href="regopt_8c.html#aeea8fcadfd245bf518d90e45c825d518">cl_regopt_anchor_end</a>, <a class="el" href="regopt_8c.html#a44d3ff55dc4223346a2c4f9c4f4cd30f">cl_regopt_anchor_start</a>, <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a>, <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a>, <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a>, <a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098">grain_buffer</a>, <a class="el" href="regopt_8c.html#a6572b918e13646e4ca08c5ce0e40ce8a">grain_buffer_grains</a>, <a class="el" href="regopt_8c.html#a3be657173ddc2221aa23f1eac93286c2">local_grain_data</a>, <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table()</a>, <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>, <a class="el" href="regopt_8c.html#a9504874fcb65abb067c81cc75a451e04">read_grain()</a>, <a class="el" href="regopt_8c.html#a696aa9aca45c0c42b9b1501ca08f39cd">read_kleene()</a>, <a class="el" href="regopt_8c.html#a237d16bb69251631763e7e7853c5a662">read_wildcard()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

<p>Referenced by <a class="el" href="regopt_8c.html#a2c4607eb8e094b7699062df8eb744058">cl_new_regex()</a>.</p>

</div>
</div>
<a class="anchor" id="ac579f14edd519c3f2aa4a4cb33c76fcb"></a><!-- doxytag: member="regopt.c::cl_regopt_count_get" ref="ac579f14edd519c3f2aa4a4cb33c76fcb" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int cl_regopt_count_get </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a reading from the "success counter" for optimised regexes. </p>
<p>The counter is incremented by 1 every time the "grain" system is used successfully to avoid calling PCRE. That is, it is incremented every time a string is scrutinised and found to contain none of the grains.</p>
<p>Usage:</p>
<p><a class="el" href="cl_8h.html#a5e4fbd44e2df4d0c89bc3d4633833dd1" title="Reset the &quot;success counter&quot; for optimised regexes.">cl_regopt_count_reset()</a>;</p>
<p>for (i = 0, hits = 0; i &lt; n; i++) if (cl_regex_match(rx, haystacks[i])) hits++;</p>
<p>fprintf(stderr, "Found %d matches; avoided regex matching %d times out of %d trials", hits, <a class="el" href="cl_8h.html#ac579f14edd519c3f2aa4a4cb33c76fcb" title="Get a reading from the &quot;success counter&quot; for optimised regexes.">cl_regopt_count_get()</a>, n );</p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#a5e4fbd44e2df4d0c89bc3d4633833dd1" title="Reset the &quot;success counter&quot; for optimised regexes.">cl_regopt_count_reset</a> </dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>an integer indicating the number of times a regular expression has been matched using the regopt system of "grains", rather than by calling an external regex library. </dd></dl>

<p>References <a class="el" href="regopt_8c.html#a2a1fce7eeb5bcc7601316ca301810a90">cl_regopt_successes</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>.</p>

</div>
</div>
<a class="anchor" id="a5e4fbd44e2df4d0c89bc3d4633833dd1"></a><!-- doxytag: member="regopt.c::cl_regopt_count_reset" ref="a5e4fbd44e2df4d0c89bc3d4633833dd1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void cl_regopt_count_reset </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reset the "success counter" for optimised regexes. </p>

<p>References <a class="el" href="regopt_8c.html#a2a1fce7eeb5bcc7601316ca301810a90">cl_regopt_successes</a>.</p>

<p>Referenced by <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>.</p>

</div>
</div>
<a class="anchor" id="a9f79b3c3dcb006c8f3414cd6465ba7ec"></a><!-- doxytag: member="regopt.c::is_safe_char" ref="a9f79b3c3dcb006c8f3414cd6465ba7ec" args="(unsigned char c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int is_safe_char </td>
          <td>(</td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is the given character a 'safe' character which will only match itself in a regex? </p>
<p>What counts as safe: A to Z, a to z, 0 to 9, minus, quote marks, percent, ampersand, slashes, excl mark, colon, semi colon, character, underscore, any value over 0x7f.</p>
<p>What counts as not safe therefore includes: brackets, braces, square brackets; questionmark, plus, and star; circumflex and dollar sign; dot; hash; etc.</p>
<p>(But, in UTF8, Unicode PUNC area equivalents of these characters will be safe.)</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">c</td><td>The character (cast to unsigned for the comparison. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True for non-special characters; false for special characters. </dd></dl>

<p>Referenced by <a class="el" href="regopt_8c.html#a9504874fcb65abb067c81cc75a451e04">read_grain()</a>, and <a class="el" href="regopt_8c.html#a71807850073d353fd312b4dd8a0eb7b8">read_matchall()</a>.</p>

</div>
</div>
<a class="anchor" id="a1b1785e702fe108639b79a3fbf6ed84f"></a><!-- doxytag: member="regopt.c::make_jump_table" ref="a1b1785e702fe108639b79a3fbf6ed84f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void make_jump_table </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Computes a jump table for Boyer-Moore searches. </p>
<p>Unlike the textbook version, this jumptable includes the last character of each grain (in order to avoid running the string comparing loops every time).</p>
<p>A non-exported function. </p>

<p>References <a class="el" href="globals_8c.html#a5c4290325b240eac5fe1542a8743286a">cl_debug</a>, <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a>, <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a>, <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a>, and <a class="el" href="regopt_8c.html#a200be31d923ac49fe9d9ab5f9963eb77">cl_regopt_jumptable</a>.</p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>.</p>

</div>
</div>
<a class="anchor" id="a4ebe3946882f5e63b53e059341d0b065"></a><!-- doxytag: member="regopt.c::read_disjunction" ref="a4ebe3946882f5e63b53e059341d0b065" args="(char *mark, int *align_start, int *align_end)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* read_disjunction </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mark</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>align_start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>align_end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Finds grains in a disjunction group - part of the CL Regex Optimiser. </p>
<p>This function find grains in disjunction group within a regular expression; the grains are then stored in the grain_buffer.</p>
<p>The first argument, mark, must point to the '(' at beginning of the disjunction group.</p>
<p>The booleans align_start and align_end are set to true if the grains from *all* alternatives are anchored at the start or end of the disjunction group, respectively.</p>
<p>This is a non-exported function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mark</td><td>Pointer to the disjunction group (see also function description). </td></tr>
    <tr><td class="paramname">align_start</td><td>See function description. </td></tr>
    <tr><td class="paramname">align_end</td><td>See function description. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A pointer to first character after the disjunction group iff the parse succeeded, the original pointer in the mark argument otherwise. </dd></dl>

<p>References <a class="el" href="cwb-itoa_8c.html#ac1ed595d526b1beccae8e324475d61ea">buf</a>, <a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098">grain_buffer</a>, <a class="el" href="regopt_8c.html#a6572b918e13646e4ca08c5ce0e40ce8a">grain_buffer_grains</a>, <a class="el" href="regopt_8c.html#a3be657173ddc2221aa23f1eac93286c2">local_grain_data</a>, <a class="el" href="regopt_8h.html#aafa5fbfbe826a5bf208d173bf0609747">MAX_GRAINS</a>, <a class="el" href="regopt_8c.html#a9504874fcb65abb067c81cc75a451e04">read_grain()</a>, and <a class="el" href="regopt_8c.html#a237d16bb69251631763e7e7853c5a662">read_wildcard()</a>.</p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>.</p>

</div>
</div>
<a class="anchor" id="a9504874fcb65abb067c81cc75a451e04"></a><!-- doxytag: member="regopt.c::read_grain" ref="a9504874fcb65abb067c81cc75a451e04" args="(char *mark)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* read_grain </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mark</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads in a grain from a regex - part of the CL Regex Optimiser. </p>
<p>A grain is a string of safe symbols not followed by ?, *, or {..}. This function finds the longest grain it can starting at the point in the regex indicated by mark; backslash-escaped characters are allowed but the backslashes must be stripped by the caller.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mark</td><td>Pointer to location in the regex string from which to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the first character after the grain it has read in (or the original "mark" pointer if no grain is found). </dd></dl>

<p>References <a class="el" href="regopt_8c.html#a9f79b3c3dcb006c8f3414cd6465ba7ec">is_safe_char()</a>.</p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, and <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>.</p>

</div>
</div>
<a class="anchor" id="a696aa9aca45c0c42b9b1501ca08f39cd"></a><!-- doxytag: member="regopt.c::read_kleene" ref="a696aa9aca45c0c42b9b1501ca08f39cd" args="(char *mark)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* read_kleene </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mark</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads in a repetition marker - part of the CL Regex Optimiser. </p>
<p>This function reads in a Kleene star (asterisk), ?, +, or the general repetition modifier {n,n}; it returns a pointer to the first character after the repetition modifier it has found.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mark</td><td>Pointer to location in the regex string from which to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the first character after the star or other modifier it has read in (or the original "mark" pointer if a repetion modifier was not read). </dd></dl>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, and <a class="el" href="regopt_8c.html#a237d16bb69251631763e7e7853c5a662">read_wildcard()</a>.</p>

</div>
</div>
<a class="anchor" id="a71807850073d353fd312b4dd8a0eb7b8"></a><!-- doxytag: member="regopt.c::read_matchall" ref="a71807850073d353fd312b4dd8a0eb7b8" args="(char *mark)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* read_matchall </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mark</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads in a matchall (dot wildcard) or safe character - part of the CL Regex Optimiser. </p>
<p>This function reads in matchall, any safe character, or a reasonably safe-looking character class.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mark</td><td>Pointer to location in the regex string from which to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the first character after the character (class) it has read in (or the original "mark" pointer if something suitable was not read). </dd></dl>

<p>References <a class="el" href="regopt_8c.html#a9f79b3c3dcb006c8f3414cd6465ba7ec">is_safe_char()</a>.</p>

<p>Referenced by <a class="el" href="regopt_8c.html#a237d16bb69251631763e7e7853c5a662">read_wildcard()</a>.</p>

</div>
</div>
<a class="anchor" id="a237d16bb69251631763e7e7853c5a662"></a><!-- doxytag: member="regopt.c::read_wildcard" ref="a237d16bb69251631763e7e7853c5a662" args="(char *mark)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* read_wildcard </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>mark</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reads in a wildcard - part of the CL Regex Optimiser. </p>
<p>This function reads in a wildcard segment matching arbitrary substring (but without a '|' symbol); it returns a pointer to the first character after the wildcard segment.</p>
<p>Note that effectively, wildcard equals matchall plus kleene.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mark</td><td>Pointer to location in the regex string from which to read. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Pointer to the first character after the wildcard segment (or the original "mark" pointer if a wildcard was not read). </dd></dl>

<p>References <a class="el" href="regopt_8c.html#a696aa9aca45c0c42b9b1501ca08f39cd">read_kleene()</a>, and <a class="el" href="regopt_8c.html#a71807850073d353fd312b4dd8a0eb7b8">read_matchall()</a>.</p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, and <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>.</p>

</div>
</div>
<a class="anchor" id="a697918b2f55aa6a0fd29906a934f5836"></a><!-- doxytag: member="regopt.c::regopt_data_copy_to_regex_object" ref="a697918b2f55aa6a0fd29906a934f5836" args="(CL_Regex rx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void regopt_data_copy_to_regex_object </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="struct___c_l___regex.html">CL_Regex</a>&#160;</td>
          <td class="paramname"><em>rx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Internal regopt function: copies optimiser data from internal global variables to the member variables of argument CL_Regex object. </p>

<p>References <a class="el" href="struct___c_l___regex.html#a93e5ad5e0410fdbd7c65a09793a14cb6">_CL_Regex::anchor_end</a>, <a class="el" href="struct___c_l___regex.html#a4e3ccc6f2ec66b18f80763c9101dc2a7">_CL_Regex::anchor_start</a>, <a class="el" href="globals_8c.html#a5c4290325b240eac5fe1542a8743286a">cl_debug</a>, <a class="el" href="regopt_8c.html#aeea8fcadfd245bf518d90e45c825d518">cl_regopt_anchor_end</a>, <a class="el" href="regopt_8c.html#a44d3ff55dc4223346a2c4f9c4f4cd30f">cl_regopt_anchor_start</a>, <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a>, <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a>, <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a>, <a class="el" href="regopt_8c.html#a200be31d923ac49fe9d9ab5f9963eb77">cl_regopt_jumptable</a>, <a class="el" href="cl_8h.html#a6647d75d1d69c7d25447da514b7e4682">cl_strdup()</a>, <a class="el" href="struct___c_l___regex.html#a343da7a5241d5dd4042b632f9c39006e">_CL_Regex::grain</a>, <a class="el" href="struct___c_l___regex.html#a6f097fa6018c5b24ea16507555185feb">_CL_Regex::grain_len</a>, <a class="el" href="struct___c_l___regex.html#a809c37615b266e2fdd396ac191b9a93c">_CL_Regex::grains</a>, and <a class="el" href="struct___c_l___regex.html#a9da424d392549ca48c495ad456441139">_CL_Regex::jumptable</a>.</p>

<p>Referenced by <a class="el" href="regopt_8c.html#a2c4607eb8e094b7699062df8eb744058">cl_new_regex()</a>.</p>

</div>
</div>
<a class="anchor" id="a397a8686e22c556c60ed1eaec5da19da"></a><!-- doxytag: member="regopt.c::update_grain_buffer" ref="a397a8686e22c556c60ed1eaec5da19da" args="(int front_aligned, int anchored)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void update_grain_buffer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>front_aligned</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>anchored</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Updates the public grain buffer -- part of the CL Regex Optimiser. </p>
<p>This function copies the local grains to the public buffer, if they are better than the set of grains currently there.</p>
<p>A non-exported function.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">front_aligned</td><td>Boolean: if true, grain strings are aligned on the left when they are reduced to equal lengths. </td></tr>
    <tr><td class="paramname">anchored</td><td>Boolean: if true, the grains are anchored at beginning or end of string, depending on front_aligned. </td></tr>
  </table>
  </dd>
</dl>

<p>References <a class="el" href="cwb-itoa_8c.html#ac1ed595d526b1beccae8e324475d61ea">buf</a>, <a class="el" href="cl_8h.html#ad68dfe0ca2fbad5052e8213a06f5b4ba">CL_MAX_LINE_LENGTH</a>, <a class="el" href="regopt_8c.html#aeea8fcadfd245bf518d90e45c825d518">cl_regopt_anchor_end</a>, <a class="el" href="regopt_8c.html#a44d3ff55dc4223346a2c4f9c4f4cd30f">cl_regopt_anchor_start</a>, <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a>, <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a>, <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a>, <a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098">grain_buffer</a>, <a class="el" href="regopt_8c.html#a6572b918e13646e4ca08c5ce0e40ce8a">grain_buffer_grains</a>, and <a class="el" href="regopt_8c.html#a81e2cfc536f9bb84b772f3cacec75635">public_grain_data</a>.</p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>.</p>

</div>
</div>
<hr/><h2>Variable Documentation</h2>
<a class="anchor" id="a72e088023b2127e96b872cdb4b1c6424"></a><!-- doxytag: member="regopt.c::cl_regex_error" ref="a72e088023b2127e96b872cdb4b1c6424" args="[CL_MAX_LINE_LENGTH]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="regopt_8c.html#a72e088023b2127e96b872cdb4b1c6424">cl_regex_error</a>[CL_MAX_LINE_LENGTH]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The error message from (PCRE) regex compilation are placed in this buffer if <a class="el" href="cl_8h.html#a2c4607eb8e094b7699062df8eb744058" title="Create a new CL_regex object (ie a regular expression buffer).">cl_new_regex()</a> fails. </p>
<p>This global variable is part of the CL_Regex object's API. </p>

<p>Referenced by <a class="el" href="regopt_8c.html#a2c4607eb8e094b7699062df8eb744058">cl_new_regex()</a>, and <a class="el" href="cl_8h.html#a6eb4641e0a1e14b63f2d5f2f5b6a8cea">cl_regex2id()</a>.</p>

</div>
</div>
<a class="anchor" id="aeea8fcadfd245bf518d90e45c825d518"></a><!-- doxytag: member="regopt.c::cl_regopt_anchor_end" ref="aeea8fcadfd245bf518d90e45c825d518" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#aeea8fcadfd245bf518d90e45c825d518">cl_regopt_anchor_end</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Boolean: whether grains are anchored at end of string. </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a44d3ff55dc4223346a2c4f9c4f4cd30f"></a><!-- doxytag: member="regopt.c::cl_regopt_anchor_start" ref="a44d3ff55dc4223346a2c4f9c4f4cd30f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#a44d3ff55dc4223346a2c4f9c4f4cd30f">cl_regopt_anchor_start</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Boolean: whether grains are anchored at beginning of string. </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a17c41125f23920984f3734380cab57c4"></a><!-- doxytag: member="regopt.c::cl_regopt_grain" ref="a17c41125f23920984f3734380cab57c4" args="[MAX_GRAINS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="regopt_8c.html#a17c41125f23920984f3734380cab57c4">cl_regopt_grain</a>[MAX_GRAINS]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>list of 'grains' (any matching string must contain one of these) </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table()</a>, <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a65b125ab93c3082f07ff0d7635350079"></a><!-- doxytag: member="regopt.c::cl_regopt_grain_len" ref="a65b125ab93c3082f07ff0d7635350079" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#a65b125ab93c3082f07ff0d7635350079">cl_regopt_grain_len</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>all the grains have the same length </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table()</a>, <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="ac4527918221c359efeb1d01fb10a1a93"></a><!-- doxytag: member="regopt.c::cl_regopt_grains" ref="ac4527918221c359efeb1d01fb10a1a93" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#ac4527918221c359efeb1d01fb10a1a93">cl_regopt_grains</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>number of grains </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table()</a>, <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a200be31d923ac49fe9d9ab5f9963eb77"></a><!-- doxytag: member="regopt.c::cl_regopt_jumptable" ref="a200be31d923ac49fe9d9ab5f9963eb77" args="[256]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#a200be31d923ac49fe9d9ab5f9963eb77">cl_regopt_jumptable</a>[256]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A jump table for Boyer-Moore search algorithm; use _unsigned_ char as index;. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f" title="Computes a jump table for Boyer-Moore searches.">make_jump_table</a> </dd></dl>

<p>Referenced by <a class="el" href="regopt_8c.html#a1b1785e702fe108639b79a3fbf6ed84f">make_jump_table()</a>, and <a class="el" href="regopt_8h.html#a697918b2f55aa6a0fd29906a934f5836">regopt_data_copy_to_regex_object()</a>.</p>

</div>
</div>
<a class="anchor" id="a2a1fce7eeb5bcc7601316ca301810a90"></a><!-- doxytag: member="regopt.c::cl_regopt_successes" ref="a2a1fce7eeb5bcc7601316ca301810a90" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#a2a1fce7eeb5bcc7601316ca301810a90">cl_regopt_successes</a> = 0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A counter of how many times the "grain" system has allwoed us to avoid calling the regex engine. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#ac579f14edd519c3f2aa4a4cb33c76fcb" title="Get a reading from the &quot;success counter&quot; for optimised regexes.">cl_regopt_count_get</a> </dd></dl>

<p>Referenced by <a class="el" href="regopt_8c.html#a7a9d3816260f385cf56e15839c518cee">cl_regex_match()</a>, <a class="el" href="regopt_8c.html#ac579f14edd519c3f2aa4a4cb33c76fcb">cl_regopt_count_get()</a>, and <a class="el" href="regopt_8c.html#a5e4fbd44e2df4d0c89bc3d4633833dd1">cl_regopt_count_reset()</a>.</p>

</div>
</div>
<a class="anchor" id="ae4d9d4be4e6b1ead777698efd2b39098"></a><!-- doxytag: member="regopt.c::grain_buffer" ref="ae4d9d4be4e6b1ead777698efd2b39098" args="[MAX_GRAINS]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* <a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098">grain_buffer</a>[MAX_GRAINS]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Intermediate buffer for grains. </p>
<p>When a regex is parsed, grains for each segment are written to this intermediate buffer; if the new set of grains is better than the current one, it is copied to the cl_regopt_ variables. </p>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a6572b918e13646e4ca08c5ce0e40ce8a"></a><!-- doxytag: member="regopt.c::grain_buffer_grains" ref="a6572b918e13646e4ca08c5ce0e40ce8a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="regopt_8c.html#a6572b918e13646e4ca08c5ce0e40ce8a">grain_buffer_grains</a> = 0</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The number of grains currently in the intermediate buffer. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#ae4d9d4be4e6b1ead777698efd2b39098" title="Intermediate buffer for grains.">grain_buffer</a> </dd></dl>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>, and <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
<a class="anchor" id="a3be657173ddc2221aa23f1eac93286c2"></a><!-- doxytag: member="regopt.c::local_grain_data" ref="a3be657173ddc2221aa23f1eac93286c2" args="[CL_MAX_LINE_LENGTH]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="regopt_8c.html#a3be657173ddc2221aa23f1eac93286c2">local_grain_data</a>[CL_MAX_LINE_LENGTH]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A buffer for grain strings. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#a81e2cfc536f9bb84b772f3cacec75635" title="A buffer for grain strings.">public_grain_data</a> </dd></dl>

<p>Referenced by <a class="el" href="regopt_8h.html#ab312a681f0a8c861a08f9d26a3f4ab95">cl_regopt_analyse()</a>, and <a class="el" href="regopt_8c.html#a4ebe3946882f5e63b53e059341d0b065">read_disjunction()</a>.</p>

</div>
</div>
<a class="anchor" id="a81e2cfc536f9bb84b772f3cacec75635"></a><!-- doxytag: member="regopt.c::public_grain_data" ref="a81e2cfc536f9bb84b772f3cacec75635" args="[CL_MAX_LINE_LENGTH]" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char <a class="el" href="regopt_8c.html#a81e2cfc536f9bb84b772f3cacec75635">public_grain_data</a>[CL_MAX_LINE_LENGTH]</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A buffer for grain strings. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="regopt_8c.html#a3be657173ddc2221aa23f1eac93286c2" title="A buffer for grain strings.">local_grain_data</a> </dd></dl>

<p>Referenced by <a class="el" href="regopt_8c.html#a397a8686e22c556c60ed1eaec5da19da">update_grain_buffer()</a>.</p>

</div>
</div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Tue Jan 17 2012 22:07:39 for CWB by&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.3 </small></address>
</body>
</html>
