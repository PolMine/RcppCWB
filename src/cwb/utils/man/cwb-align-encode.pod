=head1 NAME

cwb-align-encode - Add an alignment attribute to an existing CWB corpus

=head1 SYNOPSIS

B<cwb-align-encode> [-DCRvh] [-d I<data_dir>] [-r I<registry_dir>] 
    I<alignment_file>

=head1 DESCRIPTION

B<cwb-align-encode> encodes an alignment attribute (a-attribute) for an existing corpus. A-attributes
represent the correspondences between pairs of regions in two corpora which contain 
translation-equivalent text in two languages. Typical use for a-attributes is to
link a pair of s-attributes that represent sentences in the two corpora. 

Unlike other attributes, a-attributes cannot be created at the time of initial indexing of the corpus text files,
because an a-attribute presupposes the existence of both the corpus to which it is to be added,
and the corpus that is the target of the alignment.

B<cwb-align-encode> reads its input from a C<.align> file.  Compressed files with extension
C<.gz> or C<.bz2> are automatically decompressed.

The C<.align> file format uses CWB-internal corpus positions to identify
aligned regions of the corpus.  It is therefore recommended not to generate
such input files manually. Rather, it is better to generate them
automatically.

If your parallel corpus is not already aligned, you can use the B<cwb-align> program to
perform the alignment and generate the C<.align> file.

Alternatively, if your parallel corpus is already aligned, you can use the B<cwb-align-import>
utility from the Perl/CWB package. This utiltiy imports external
alignment files which reference regions on s-attributes by annotated ID codes (cf. C<man cwb-align-import>);
it also automatically encodes the imported data into an a-attribute, so that if you use B<cwb-align-import>,
you do not need to also use B<cwb-align-encode>.

If you I<do> need to create a C<.align> file yourself, it I<must> comply with the definition of this file format.

You can use B<cwb-align-show>, q.v., to inspect the contents of the C<.align> file prior to encoding it.

The IDs of the two aligned corpora are specified within the C<.align> file itself. B<cwb-align-encode> will look 
for these corpora in the registry directory, as usual. If a registry
location is not specified with the B<-r> option, then either a directory specified by the CORPUS_REGISTRY
environment variable, or CWB's built-in default registry will be used.

=head1 ADDING A REGISTRY ENTRY

Like all attributes, the a-attribute that you encode must be declared in the registry file of the corpus it
belongs to. A-attributes link two corpora, but they are deemed to "belong to" the first of the pair, which
we call the I<source corpus> (while the second of the pair is the I<target corpus>). 
For that reason, the a-attribute must be declared in the registry file of the
source corpus.

An a-attribute declaration consists of a single line, starting with C<ALIGNED>, followed by the name
of the a-attribute. Unlike other kinds of attribute, you cannot choose a name for an a-attribute;
an a-attribute's name is always the same as the ID of the  target corpus. So, the line that you
should add to the registry file of the source corpus is as follows.

        ALIGNED my_target_corpus

with the actual ID of the target corpus in place of I<my_target_corpus> - note that it is the lowercase
version of the ID that is used here!

It is also possible to use  the CWB/Perl tools to alter the registry file automatically.
The command for this is as follows:

        cwb-regedit MY_SOURCE_CORPUS :add :a my_target_corpus

Finally, note that you must add the registry entry I<before> encoding the a-attribute with B<cwb-align-encode>. 

=head1 OPTIONS

Please note that no CWB programs currently support GNU-style C<--long-options>.

=over 4

=item B<-C>

Activates "compatibility mode". By default, CWB uses an index format called "extended alignment" for 
a-attributes. Earlier versions of CWB used a different format which allowed fewer types of alignment
relationship. If you want your a-attribute to be usable with very old versions of the CWB software
(B<not> recommended!) you need to encode it in compatibility mode; this causes I<both> the new-style
extended alignment data structure, I<and> the old-style data structure to be created.

If you always use CWB v3.0 or higher (recommended! as older versions are no longer supported)
then you have no need of compatibility mode.

=item B<-d> I<data_dir>

Specifies the directory where the data files making up the a-attribute are to be placed. 
An alignment attribute consists of an C<.alx> file (and an C<.alg> file if compatibility mode
is enabled); you cannot choose the names of these files, only their location, using this option
or B<-D>.  Note that if you specify a data directory different from that declared as C<HOME> in
the source corpus registry file, other CWB programs such as CQP will not be able to find the 
alignment data.

At least one - and only one - of the B<-D> and B<-d> options must be specified.  

=item B<-D>

Specifies that the data files making up the encoded a-attribute should be placed in the corpus data 
directory specified in the registry file of the source corpus.

Note that the source corpus is the first one mentioned in the header line of the C<.align> file.

At least one - and only one - of the B<-D> and B<-d> options must be specified.  

=item B<-h>

Displays B<cwb-align-encode>'s help message, with short information about the usage of the command line options.  
This usage message will be also shown if B<cwb-align-encode> is called with invalid options.
After the usage message is printed, B<cwb-align-encode> will exit.

=item B<-r> I<registry_dir>

Specifies that the registry files for the two aligned corpora are located in I<registry_dir>,
instead of the standard registry. If this option is not specified, then a directory 
specified by the CORPUS_REGISTRY environment variable will be used; if that is not available, 
the built-in CWB default will be used.

=item B<-R>

Enables "reverse" mode. In this mode, the source and target corpora are reversed. Normally, the source
corpus is the I<first> corpus specified in the header line of the input file, and the targe corpus is
mentioned I<second>; each row of the input file specifies regions fo the source and target corpora in that
same order. If the B<-R> option is specified, then the I<second> corpus is the source corpus, and the
I<first> corpus is the target corpus.

This option works by swapping the source and target ranges of each alignment bead, so it can only be
used if there are no crossing alignment beads.

=item B<-v>

Activates verbose mode. In this mode, information about the encoding process is printed to standard output.

=back


=head1 INPUT FORMAT

The input to B<cwb-align-encode> is identical to the output format of B<cwb-align>, that is, the C<.align> format.

This format is described in full in the B<OUTPUT FORMAT> section of the manual page for B<cwb-align>,
which should be available alongside this page.

=head1 SEE ALSO

L<cqp>, L<cqpserver>, L<cwb-align>, L<cwb-align-show>, L<cwb-align-decode>, L<cwb-describe-corpus>, 
L<cwb-s-decode>, L<cwb-lexdecode>, L<cwb-align-decode>, L<cwb-scan-corpus>.

=head1 COPYRIGHT

=over 4

=item
B<IMS Open Corpus Workbench (CWB)> L<http://cwb.sourceforge.net/>

=item
Copyright (C) 1993-2006 by IMS, University of Stuttgart

=item
Copyright (C) 2007- by the respective contributers (see file F<AUTHORS>)

=back

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details
(in the file F<COPYING>, or available via WWW at
L<http://www.gnu.org/copyleft/gpl.html>).

=cut

